{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7196/api/Shipment';\n  }\n  // postFormData(data: any): Observable<string> {\n  //   // return this.http.post(this.apiUrl, data, { responseType: 'text' });\n  //   return this.http.post<string[]>(this.apiUrl, data);\n  // }\n  postFormData(data) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(this.apiUrl, data, httpOptions).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    // You can handle errors as per your application's requirements.\n    console.error('An error occurred:', error);\n    return throwError('Something went wrong. Please try again later.');\n  }\n  getAllShipments() {\n    return this.http.get(\"https://localhost:7196/api/Shipment/GetShipments\").pipe(catchError(this.handleError));\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","throwError","catchError","ApiService","constructor","http","apiUrl","postFormData","data","httpOptions","headers","post","pipe","handleError","error","console","getAllShipments","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["F:\\Angular CLI\\Angular-CLI-main\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private apiUrl = 'https://localhost:7196/api/Shipment'; \n   qrs:any;\n   rcptNmbrs:any;\n  constructor(private http: HttpClient) {}\n\n  // postFormData(data: any): Observable<string> {\n  //   // return this.http.post(this.apiUrl, data, { responseType: 'text' });\n  //   return this.http.post<string[]>(this.apiUrl, data);\n  // }\n\n  postFormData(data: any): Observable<string[]> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.http.post<string[]>(this.apiUrl, data, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n  private handleError(error: any) {\n    // You can handle errors as per your application's requirements.\n    console.error('An error occurred:', error);\n    return throwError('Something went wrong. Please try again later.');\n  }\n\n  getAllShipments(): Observable<any[]> {\n    return this.http.get<any[]>(\"https://localhost:7196/api/Shipment/GetShipments\").pipe(catchError(this.handleError));\n  }\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,qCAAqC;EAGf;EAEvC;EACA;EACA;EACA;EAEAC,YAAYA,CAACC,IAAS;IACpB,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIV,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAED,OAAO,IAAI,CAACK,IAAI,CAACM,IAAI,CAAW,IAAI,CAACL,MAAM,EAAEE,IAAI,EAAEC,WAAW,CAAC,CAC5DG,IAAI,CACHV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACL;EACQA,WAAWA,CAACC,KAAU;IAC5B;IACAC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAOb,UAAU,CAAC,+CAA+C,CAAC;EACpE;EAEAe,eAAeA,CAAA;IACb,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAQ,kDAAkD,CAAC,CAACL,IAAI,CAACV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAAC;EACpH;;SA/BWV,UAAU;;mBAAVA,MAAU,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAVlB,MAAU;EAAAmB,OAAA,EAAVnB,MAAU,CAAAoB,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}