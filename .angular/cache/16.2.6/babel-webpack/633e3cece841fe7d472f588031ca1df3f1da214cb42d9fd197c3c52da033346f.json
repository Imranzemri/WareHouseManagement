{"ast":null,"code":"/**\r\n * Enum for the operation mode of a JsonConvert instance.\r\n *\r\n * The values should be used as follows:\r\n * - DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n * - ENABLE: json2typescript is enabled, but only errors are logged\r\n * - LOGGING: json2typescript is enabled and detailed information is logged\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\nexport var OperationMode;\n(function (OperationMode) {\n  OperationMode[OperationMode[\"DISABLE\"] = 0] = \"DISABLE\";\n  OperationMode[OperationMode[\"ENABLE\"] = 1] = \"ENABLE\";\n  OperationMode[OperationMode[\"LOGGING\"] = 2] = \"LOGGING\";\n})(OperationMode || (OperationMode = {}));\n;\n/**\r\n * Enum for the property matching mode of a JsonConvert instance.\r\n *\r\n * The values should be used as follows:\r\n * - CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n * - CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they are not case sensitive\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\nexport var PropertyMatchingRule;\n(function (PropertyMatchingRule) {\n  PropertyMatchingRule[PropertyMatchingRule[\"CASE_STRICT\"] = 1] = \"CASE_STRICT\";\n  PropertyMatchingRule[PropertyMatchingRule[\"CASE_INSENSITIVE\"] = 2] = \"CASE_INSENSITIVE\";\n})(PropertyMatchingRule || (PropertyMatchingRule = {}));\n;\n/**\r\n * Enum for the value checking mode of a JsonConvert instance for the serialization and deserialization.\r\n *\r\n * The values should be used as follows:\r\n * - ALLOW_NULL: all given values in the JSON are allowed to be null\r\n * - ALLOW_OBJECT_NULL: objects in the JSON are allowed to be null, primitive types are not allowed to be null\r\n * - DISALLOW_NULL: no null values are tolerated in the JSON\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\nexport var ValueCheckingMode;\n(function (ValueCheckingMode) {\n  ValueCheckingMode[ValueCheckingMode[\"ALLOW_NULL\"] = 1] = \"ALLOW_NULL\";\n  ValueCheckingMode[ValueCheckingMode[\"ALLOW_OBJECT_NULL\"] = 2] = \"ALLOW_OBJECT_NULL\";\n  ValueCheckingMode[ValueCheckingMode[\"DISALLOW_NULL\"] = 3] = \"DISALLOW_NULL\";\n})(ValueCheckingMode || (ValueCheckingMode = {}));\n;\n/**\r\n * Enum for the property converting mode of a property (de)serialized with JsonConvert.\r\n *\r\n * The converting mode defines what happens for nullable types.\r\n * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n *\r\n * The setting overrides the behavior of the ValueCheckingMode for a specific property.\r\n *\r\n * The values should be used as follows:\r\n * - MAP_NULLABLE: a nullable property is passed to the mapper, type is normally checked\r\n * - IGNORE_NULLABLE: the property is never passed if missing, undefined or null\r\n * - PASS_NULLABLE: the property is passed and the given type for the mapping is ignored\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\nexport var PropertyConvertingMode;\n(function (PropertyConvertingMode) {\n  PropertyConvertingMode[PropertyConvertingMode[\"MAP_NULLABLE\"] = 0] = \"MAP_NULLABLE\";\n  PropertyConvertingMode[PropertyConvertingMode[\"IGNORE_NULLABLE\"] = 1] = \"IGNORE_NULLABLE\";\n  PropertyConvertingMode[PropertyConvertingMode[\"PASS_NULLABLE\"] = 2] = \"PASS_NULLABLE\";\n})(PropertyConvertingMode || (PropertyConvertingMode = {}));\n;","map":{"version":3,"names":["OperationMode","PropertyMatchingRule","ValueCheckingMode","PropertyConvertingMode"],"sources":["D:/PWS/WareHouseManagement/node_modules/json2typescript/lib/esm/src/json2typescript/json-convert-enums.js"],"sourcesContent":["/**\r\n * Enum for the operation mode of a JsonConvert instance.\r\n *\r\n * The values should be used as follows:\r\n * - DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n * - ENABLE: json2typescript is enabled, but only errors are logged\r\n * - LOGGING: json2typescript is enabled and detailed information is logged\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\r\nexport var OperationMode;\r\n(function (OperationMode) {\r\n    OperationMode[OperationMode[\"DISABLE\"] = 0] = \"DISABLE\";\r\n    OperationMode[OperationMode[\"ENABLE\"] = 1] = \"ENABLE\";\r\n    OperationMode[OperationMode[\"LOGGING\"] = 2] = \"LOGGING\";\r\n})(OperationMode || (OperationMode = {}));\r\n;\r\n/**\r\n * Enum for the property matching mode of a JsonConvert instance.\r\n *\r\n * The values should be used as follows:\r\n * - CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n * - CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they are not case sensitive\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\r\nexport var PropertyMatchingRule;\r\n(function (PropertyMatchingRule) {\r\n    PropertyMatchingRule[PropertyMatchingRule[\"CASE_STRICT\"] = 1] = \"CASE_STRICT\";\r\n    PropertyMatchingRule[PropertyMatchingRule[\"CASE_INSENSITIVE\"] = 2] = \"CASE_INSENSITIVE\";\r\n})(PropertyMatchingRule || (PropertyMatchingRule = {}));\r\n;\r\n/**\r\n * Enum for the value checking mode of a JsonConvert instance for the serialization and deserialization.\r\n *\r\n * The values should be used as follows:\r\n * - ALLOW_NULL: all given values in the JSON are allowed to be null\r\n * - ALLOW_OBJECT_NULL: objects in the JSON are allowed to be null, primitive types are not allowed to be null\r\n * - DISALLOW_NULL: no null values are tolerated in the JSON\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\r\nexport var ValueCheckingMode;\r\n(function (ValueCheckingMode) {\r\n    ValueCheckingMode[ValueCheckingMode[\"ALLOW_NULL\"] = 1] = \"ALLOW_NULL\";\r\n    ValueCheckingMode[ValueCheckingMode[\"ALLOW_OBJECT_NULL\"] = 2] = \"ALLOW_OBJECT_NULL\";\r\n    ValueCheckingMode[ValueCheckingMode[\"DISALLOW_NULL\"] = 3] = \"DISALLOW_NULL\";\r\n})(ValueCheckingMode || (ValueCheckingMode = {}));\r\n;\r\n/**\r\n * Enum for the property converting mode of a property (de)serialized with JsonConvert.\r\n *\r\n * The converting mode defines what happens for nullable types.\r\n * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n *\r\n * The setting overrides the behavior of the ValueCheckingMode for a specific property.\r\n *\r\n * The values should be used as follows:\r\n * - MAP_NULLABLE: a nullable property is passed to the mapper, type is normally checked\r\n * - IGNORE_NULLABLE: the property is never passed if missing, undefined or null\r\n * - PASS_NULLABLE: the property is passed and the given type for the mapping is ignored\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation\r\n */\r\nexport var PropertyConvertingMode;\r\n(function (PropertyConvertingMode) {\r\n    PropertyConvertingMode[PropertyConvertingMode[\"MAP_NULLABLE\"] = 0] = \"MAP_NULLABLE\";\r\n    PropertyConvertingMode[PropertyConvertingMode[\"IGNORE_NULLABLE\"] = 1] = \"IGNORE_NULLABLE\";\r\n    PropertyConvertingMode[PropertyConvertingMode[\"PASS_NULLABLE\"] = 2] = \"PASS_NULLABLE\";\r\n})(PropertyConvertingMode || (PropertyConvertingMode = {}));\r\n;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,aAAa;AACxB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAACA,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACvDA,aAAa,CAACA,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EACrDA,aAAa,CAACA,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;AAC3D,CAAC,EAAEA,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,oBAAoB;AAC/B,CAAC,UAAUA,oBAAoB,EAAE;EAC7BA,oBAAoB,CAACA,oBAAoB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa;EAC7EA,oBAAoB,CAACA,oBAAoB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB;AAC3F,CAAC,EAAEA,oBAAoB,KAAKA,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,iBAAiB;AAC5B,CAAC,UAAUA,iBAAiB,EAAE;EAC1BA,iBAAiB,CAACA,iBAAiB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACrEA,iBAAiB,CAACA,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB;EACnFA,iBAAiB,CAACA,iBAAiB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;AAC/E,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,sBAAsB;AACjC,CAAC,UAAUA,sBAAsB,EAAE;EAC/BA,sBAAsB,CAACA,sBAAsB,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;EACnFA,sBAAsB,CAACA,sBAAsB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,GAAG,iBAAiB;EACzFA,sBAAsB,CAACA,sBAAsB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;AACzF,CAAC,EAAEA,sBAAsB,KAAKA,sBAAsB,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3D"},"metadata":{},"sourceType":"module","externalDependencies":[]}