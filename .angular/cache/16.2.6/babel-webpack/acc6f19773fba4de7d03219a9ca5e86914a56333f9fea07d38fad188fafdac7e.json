{"ast":null,"code":"import { MappingOptions, Settings } from \"./json-convert-options\";\nimport { Any } from \"./any\";\nimport { PropertyConvertingMode } from \"./json-convert-enums\";\n/**\r\n * Map of all registered json objects\r\n */\nvar jsonObjectsMap = new Map();\n/**\r\n * Decorator of a class that is a custom converter.\r\n *\r\n * @param target the class\r\n */\nexport function JsonConverter(target) {\n  target[Settings.MAPPER_PROPERTY] = \"\";\n}\n/**\r\n * Decorator of a class that comes from a JSON object.\r\n *\r\n * @param classIdentifier the class identifier\r\n *\r\n * @returns\r\n *\r\n * @throws Error\r\n */\nexport function JsonObject(classIdentifier) {\n  return function (target) {\n    var _a;\n    // Store the classIdentifier with the actual class reference\n    if (jsonObjectsMap.has(classIdentifier)) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"You must use unique class identifiers in the @JsonObject() decorator.\\n\\n\" + \"\\tClass identifier: \\n\" + \"\\t\\t\" + classIdentifier + \"\\n\\n\" + \"This class identifier has been already used for class \\\"\" + ((_a = jsonObjectsMap.get(classIdentifier)) === null || _a === void 0 ? void 0 : _a.name) + \"\\\".\\n\\n\");\n    } else {\n      jsonObjectsMap.set(classIdentifier, target);\n    }\n    target.prototype[Settings.CLASS_IDENTIFIER] = classIdentifier.length > 0 ? classIdentifier : target.name;\n    var mapping = target.prototype[Settings.MAPPING_PROPERTY];\n    // Make sure we replace the mapping names of all properties of this class\n    if (!mapping) return;\n    var unmappedKeys = Object.keys(mapping).filter(function (val) {\n      return val.indexOf(Settings.CLASS_IDENTIFIER + \".\") === 0;\n    });\n    for (var _i = 0, unmappedKeys_1 = unmappedKeys; _i < unmappedKeys_1.length; _i++) {\n      var key = unmappedKeys_1[_i];\n      mapping[key.replace(Settings.CLASS_IDENTIFIER, target.prototype[Settings.CLASS_IDENTIFIER])] = mapping[key];\n      // We must delete the mapping without associated class since it will\n      // cause issues with inheritance of mappings and overrides.\n      delete mapping[key];\n    }\n  };\n}\n/**\r\n * Decorator of a class property that comes from a JSON object.\r\n *\r\n * The second param can be either a type or a class of a custom converter.\r\n *\r\n * Use the following notation for the type:\r\n * - Primitive type: String|Number|Boolean\r\n * - Custom type: YourClassName\r\n * - Array type: [String|Number|Boolean|YourClassName]\r\n *\r\n * If you decide to use a custom converter, make sure this class implements the interface JsonCustomConvert from this package.\r\n *\r\n * @param jsonPropertyName optional param (default: classPropertyName) the property name in the expected JSON object\r\n * @param conversionOption optional param (default: Any), should be either the expected type (String|Boolean|Number|etc) or a custom converter class implementing JsonCustomConvert\r\n * @param convertingMode optional param (default: PropertyConvertingMode.MAP_NULLABLE), determines how nullable\r\n * property types should be serialized and deserialized\r\n *\r\n * @returns\r\n *\r\n * @throws Error\r\n */\nexport function JsonProperty() {\n  var params = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    params[_i] = arguments[_i];\n  }\n  return function (target, classPropertyName) {\n    // target is the class\n    var jsonPropertyName = classPropertyName;\n    var conversionOption = Any;\n    var convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n    switch (params.length) {\n      case 1:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        jsonPropertyName = params[0];\n        break;\n      case 2:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        if (params[1] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n        jsonPropertyName = params[0];\n        conversionOption = params[1];\n        break;\n      case 3:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        if (params[1] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n        jsonPropertyName = params[0];\n        conversionOption = params[1];\n        if (params[2] === true) {\n          convertingMode = PropertyConvertingMode.IGNORE_NULLABLE;\n        } else if (params[2] === PropertyConvertingMode.IGNORE_NULLABLE || params[2] === PropertyConvertingMode.PASS_NULLABLE || params[2] === PropertyConvertingMode.MAP_NULLABLE) {\n          convertingMode = params[2];\n        } else {\n          convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n        }\n        break;\n      default:\n        break;\n    }\n    if (typeof target[Settings.MAPPING_PROPERTY] === \"undefined\") {\n      target[Settings.MAPPING_PROPERTY] = [];\n    }\n    var jsonPropertyMappingOptions = new MappingOptions();\n    jsonPropertyMappingOptions.classPropertyName = classPropertyName;\n    jsonPropertyMappingOptions.jsonPropertyName = jsonPropertyName;\n    jsonPropertyMappingOptions.convertingMode = convertingMode;\n    // Check if conversionOption is a type or a custom converter.\n    if (typeof conversionOption !== \"undefined\" && conversionOption !== null && typeof conversionOption[Settings.MAPPER_PROPERTY] !== \"undefined\") {\n      jsonPropertyMappingOptions.customConverter = new conversionOption();\n    } else {\n      jsonPropertyMappingOptions.expectedJsonType = conversionOption;\n    }\n    // Save the mapping info\n    if (typeof target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] === \"undefined\") {\n      target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] = jsonPropertyMappingOptions;\n    } else {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to add multiple decorators for the same property.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\");\n    }\n  };\n}","map":{"version":3,"names":["MappingOptions","Settings","Any","PropertyConvertingMode","jsonObjectsMap","Map","JsonConverter","target","MAPPER_PROPERTY","JsonObject","classIdentifier","_a","has","Error","get","name","set","prototype","CLASS_IDENTIFIER","length","mapping","MAPPING_PROPERTY","unmappedKeys","Object","keys","filter","val","indexOf","_i","unmappedKeys_1","key","replace","JsonProperty","params","arguments","classPropertyName","jsonPropertyName","conversionOption","convertingMode","MAP_NULLABLE","undefined","IGNORE_NULLABLE","PASS_NULLABLE","jsonPropertyMappingOptions","customConverter","expectedJsonType"],"sources":["D:/PWS/WareHouseManagement/node_modules/json2typescript/lib/esm/src/json2typescript/json-convert-decorators.js"],"sourcesContent":["import { MappingOptions, Settings } from \"./json-convert-options\";\r\nimport { Any } from \"./any\";\r\nimport { PropertyConvertingMode } from \"./json-convert-enums\";\r\n/**\r\n * Map of all registered json objects\r\n */\r\nvar jsonObjectsMap = new Map();\r\n/**\r\n * Decorator of a class that is a custom converter.\r\n *\r\n * @param target the class\r\n */\r\nexport function JsonConverter(target) {\r\n    target[Settings.MAPPER_PROPERTY] = \"\";\r\n}\r\n/**\r\n * Decorator of a class that comes from a JSON object.\r\n *\r\n * @param classIdentifier the class identifier\r\n *\r\n * @returns\r\n *\r\n * @throws Error\r\n */\r\nexport function JsonObject(classIdentifier) {\r\n    return function (target) {\r\n        var _a;\r\n        // Store the classIdentifier with the actual class reference\r\n        if (jsonObjectsMap.has(classIdentifier)) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"You must use unique class identifiers in the @JsonObject() decorator.\\n\\n\" +\r\n                \"\\tClass identifier: \\n\" +\r\n                \"\\t\\t\" + classIdentifier + \"\\n\\n\" +\r\n                \"This class identifier has been already used for class \\\"\" + ((_a = jsonObjectsMap.get(classIdentifier)) === null || _a === void 0 ? void 0 : _a.name) + \"\\\".\\n\\n\");\r\n        }\r\n        else {\r\n            jsonObjectsMap.set(classIdentifier, target);\r\n        }\r\n        target.prototype[Settings.CLASS_IDENTIFIER] = classIdentifier.length > 0 ? classIdentifier : target.name;\r\n        var mapping = target.prototype[Settings.MAPPING_PROPERTY];\r\n        // Make sure we replace the mapping names of all properties of this class\r\n        if (!mapping)\r\n            return;\r\n        var unmappedKeys = Object.keys(mapping)\r\n            .filter(function (val) { return val.indexOf(Settings.CLASS_IDENTIFIER + \".\") === 0; });\r\n        for (var _i = 0, unmappedKeys_1 = unmappedKeys; _i < unmappedKeys_1.length; _i++) {\r\n            var key = unmappedKeys_1[_i];\r\n            mapping[key.replace(Settings.CLASS_IDENTIFIER, target.prototype[Settings.CLASS_IDENTIFIER])] =\r\n                mapping[key];\r\n            // We must delete the mapping without associated class since it will\r\n            // cause issues with inheritance of mappings and overrides.\r\n            delete mapping[key];\r\n        }\r\n    };\r\n}\r\n/**\r\n * Decorator of a class property that comes from a JSON object.\r\n *\r\n * The second param can be either a type or a class of a custom converter.\r\n *\r\n * Use the following notation for the type:\r\n * - Primitive type: String|Number|Boolean\r\n * - Custom type: YourClassName\r\n * - Array type: [String|Number|Boolean|YourClassName]\r\n *\r\n * If you decide to use a custom converter, make sure this class implements the interface JsonCustomConvert from this package.\r\n *\r\n * @param jsonPropertyName optional param (default: classPropertyName) the property name in the expected JSON object\r\n * @param conversionOption optional param (default: Any), should be either the expected type (String|Boolean|Number|etc) or a custom converter class implementing JsonCustomConvert\r\n * @param convertingMode optional param (default: PropertyConvertingMode.MAP_NULLABLE), determines how nullable\r\n * property types should be serialized and deserialized\r\n *\r\n * @returns\r\n *\r\n * @throws Error\r\n */\r\nexport function JsonProperty() {\r\n    var params = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        params[_i] = arguments[_i];\r\n    }\r\n    return function (target, classPropertyName) {\r\n        // target is the class\r\n        var jsonPropertyName = classPropertyName;\r\n        var conversionOption = Any;\r\n        var convertingMode = PropertyConvertingMode.MAP_NULLABLE;\r\n        switch (params.length) {\r\n            case 1:\r\n                if (params[0] === undefined)\r\n                    throw new Error(\"Fatal error in JsonConvert. \" +\r\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" +\r\n                        \"\\tClass property: \\n\" +\r\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\r\n                        \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\r\n                jsonPropertyName = params[0];\r\n                break;\r\n            case 2:\r\n                if (params[0] === undefined)\r\n                    throw new Error(\"Fatal error in JsonConvert. \" +\r\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" +\r\n                        \"\\tClass property: \\n\" +\r\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\r\n                        \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\r\n                if (params[1] === undefined)\r\n                    throw new Error(\"Fatal error in JsonConvert. \" +\r\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" +\r\n                        \"\\tClass property: \\n\" +\r\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\r\n                        \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\r\n                jsonPropertyName = params[0];\r\n                conversionOption = params[1];\r\n                break;\r\n            case 3:\r\n                if (params[0] === undefined)\r\n                    throw new Error(\"Fatal error in JsonConvert. \" +\r\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" +\r\n                        \"\\tClass property: \\n\" +\r\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\r\n                        \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\r\n                if (params[1] === undefined)\r\n                    throw new Error(\"Fatal error in JsonConvert. \" +\r\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" +\r\n                        \"\\tClass property: \\n\" +\r\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\r\n                        \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\r\n                jsonPropertyName = params[0];\r\n                conversionOption = params[1];\r\n                if (params[2] === true) {\r\n                    convertingMode = PropertyConvertingMode.IGNORE_NULLABLE;\r\n                }\r\n                else if (params[2] === PropertyConvertingMode.IGNORE_NULLABLE ||\r\n                    params[2] === PropertyConvertingMode.PASS_NULLABLE ||\r\n                    params[2] === PropertyConvertingMode.MAP_NULLABLE) {\r\n                    convertingMode = params[2];\r\n                }\r\n                else {\r\n                    convertingMode = PropertyConvertingMode.MAP_NULLABLE;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (typeof (target[Settings.MAPPING_PROPERTY]) === \"undefined\") {\r\n            target[Settings.MAPPING_PROPERTY] = [];\r\n        }\r\n        var jsonPropertyMappingOptions = new MappingOptions();\r\n        jsonPropertyMappingOptions.classPropertyName = classPropertyName;\r\n        jsonPropertyMappingOptions.jsonPropertyName = jsonPropertyName;\r\n        jsonPropertyMappingOptions.convertingMode = convertingMode;\r\n        // Check if conversionOption is a type or a custom converter.\r\n        if (typeof (conversionOption) !== \"undefined\" && conversionOption !== null && typeof (conversionOption[Settings.MAPPER_PROPERTY]) !== \"undefined\") {\r\n            jsonPropertyMappingOptions.customConverter = new conversionOption();\r\n        }\r\n        else {\r\n            jsonPropertyMappingOptions.expectedJsonType = conversionOption;\r\n        }\r\n        // Save the mapping info\r\n        if (typeof (target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName]) === \"undefined\") {\r\n            target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] = jsonPropertyMappingOptions;\r\n        }\r\n        else {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"It is not allowed to add multiple decorators for the same property.\\n\\n\" +\r\n                \"\\tClass property: \\n\" +\r\n                \"\\t\\t\" + classPropertyName + \"\\n\\n\");\r\n        }\r\n    };\r\n}\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,QAAQ,QAAQ,wBAAwB;AACjE,SAASC,GAAG,QAAQ,OAAO;AAC3B,SAASC,sBAAsB,QAAQ,sBAAsB;AAC7D;AACA;AACA;AACA,IAAIC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAE;EAClCA,MAAM,CAACN,QAAQ,CAACO,eAAe,CAAC,GAAG,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,eAAe,EAAE;EACxC,OAAO,UAAUH,MAAM,EAAE;IACrB,IAAII,EAAE;IACN;IACA,IAAIP,cAAc,CAACQ,GAAG,CAACF,eAAe,CAAC,EAAE;MACrC,MAAM,IAAIG,KAAK,CAAC,8BAA8B,GAC1C,2EAA2E,GAC3E,wBAAwB,GACxB,MAAM,GAAGH,eAAe,GAAG,MAAM,GACjC,0DAA0D,IAAI,CAACC,EAAE,GAAGP,cAAc,CAACU,GAAG,CAACJ,eAAe,CAAC,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,IAAI,CAAC,GAAG,SAAS,CAAC;IAC3K,CAAC,MACI;MACDX,cAAc,CAACY,GAAG,CAACN,eAAe,EAAEH,MAAM,CAAC;IAC/C;IACAA,MAAM,CAACU,SAAS,CAAChB,QAAQ,CAACiB,gBAAgB,CAAC,GAAGR,eAAe,CAACS,MAAM,GAAG,CAAC,GAAGT,eAAe,GAAGH,MAAM,CAACQ,IAAI;IACxG,IAAIK,OAAO,GAAGb,MAAM,CAACU,SAAS,CAAChB,QAAQ,CAACoB,gBAAgB,CAAC;IACzD;IACA,IAAI,CAACD,OAAO,EACR;IACJ,IAAIE,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,CAClCK,MAAM,CAAC,UAAUC,GAAG,EAAE;MAAE,OAAOA,GAAG,CAACC,OAAO,CAAC1B,QAAQ,CAACiB,gBAAgB,GAAG,GAAG,CAAC,KAAK,CAAC;IAAE,CAAC,CAAC;IAC1F,KAAK,IAAIU,EAAE,GAAG,CAAC,EAAEC,cAAc,GAAGP,YAAY,EAAEM,EAAE,GAAGC,cAAc,CAACV,MAAM,EAAES,EAAE,EAAE,EAAE;MAC9E,IAAIE,GAAG,GAAGD,cAAc,CAACD,EAAE,CAAC;MAC5BR,OAAO,CAACU,GAAG,CAACC,OAAO,CAAC9B,QAAQ,CAACiB,gBAAgB,EAAEX,MAAM,CAACU,SAAS,CAAChB,QAAQ,CAACiB,gBAAgB,CAAC,CAAC,CAAC,GACxFE,OAAO,CAACU,GAAG,CAAC;MAChB;MACA;MACA,OAAOV,OAAO,CAACU,GAAG,CAAC;IACvB;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAAA,EAAG;EAC3B,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIL,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGM,SAAS,CAACf,MAAM,EAAES,EAAE,EAAE,EAAE;IAC1CK,MAAM,CAACL,EAAE,CAAC,GAAGM,SAAS,CAACN,EAAE,CAAC;EAC9B;EACA,OAAO,UAAUrB,MAAM,EAAE4B,iBAAiB,EAAE;IACxC;IACA,IAAIC,gBAAgB,GAAGD,iBAAiB;IACxC,IAAIE,gBAAgB,GAAGnC,GAAG;IAC1B,IAAIoC,cAAc,GAAGnC,sBAAsB,CAACoC,YAAY;IACxD,QAAQN,MAAM,CAACd,MAAM;MACjB,KAAK,CAAC;QACF,IAAIc,MAAM,CAAC,CAAC,CAAC,KAAKO,SAAS,EACvB,MAAM,IAAI3B,KAAK,CAAC,8BAA8B,GAC1C,2GAA2G,GAC3G,sBAAsB,GACtB,MAAM,GAAGsB,iBAAiB,GAAG,MAAM,GACnC,0FAA0F,CAAC;QACnGC,gBAAgB,GAAGH,MAAM,CAAC,CAAC,CAAC;QAC5B;MACJ,KAAK,CAAC;QACF,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAKO,SAAS,EACvB,MAAM,IAAI3B,KAAK,CAAC,8BAA8B,GAC1C,2GAA2G,GAC3G,sBAAsB,GACtB,MAAM,GAAGsB,iBAAiB,GAAG,MAAM,GACnC,0FAA0F,CAAC;QACnG,IAAIF,MAAM,CAAC,CAAC,CAAC,KAAKO,SAAS,EACvB,MAAM,IAAI3B,KAAK,CAAC,8BAA8B,GAC1C,4GAA4G,GAC5G,sBAAsB,GACtB,MAAM,GAAGsB,iBAAiB,GAAG,MAAM,GACnC,wFAAwF,CAAC;QACjGC,gBAAgB,GAAGH,MAAM,CAAC,CAAC,CAAC;QAC5BI,gBAAgB,GAAGJ,MAAM,CAAC,CAAC,CAAC;QAC5B;MACJ,KAAK,CAAC;QACF,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAKO,SAAS,EACvB,MAAM,IAAI3B,KAAK,CAAC,8BAA8B,GAC1C,2GAA2G,GAC3G,sBAAsB,GACtB,MAAM,GAAGsB,iBAAiB,GAAG,MAAM,GACnC,0FAA0F,CAAC;QACnG,IAAIF,MAAM,CAAC,CAAC,CAAC,KAAKO,SAAS,EACvB,MAAM,IAAI3B,KAAK,CAAC,8BAA8B,GAC1C,4GAA4G,GAC5G,sBAAsB,GACtB,MAAM,GAAGsB,iBAAiB,GAAG,MAAM,GACnC,wFAAwF,CAAC;QACjGC,gBAAgB,GAAGH,MAAM,CAAC,CAAC,CAAC;QAC5BI,gBAAgB,GAAGJ,MAAM,CAAC,CAAC,CAAC;QAC5B,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;UACpBK,cAAc,GAAGnC,sBAAsB,CAACsC,eAAe;QAC3D,CAAC,MACI,IAAIR,MAAM,CAAC,CAAC,CAAC,KAAK9B,sBAAsB,CAACsC,eAAe,IACzDR,MAAM,CAAC,CAAC,CAAC,KAAK9B,sBAAsB,CAACuC,aAAa,IAClDT,MAAM,CAAC,CAAC,CAAC,KAAK9B,sBAAsB,CAACoC,YAAY,EAAE;UACnDD,cAAc,GAAGL,MAAM,CAAC,CAAC,CAAC;QAC9B,CAAC,MACI;UACDK,cAAc,GAAGnC,sBAAsB,CAACoC,YAAY;QACxD;QACA;MACJ;QACI;IACR;IACA,IAAI,OAAQhC,MAAM,CAACN,QAAQ,CAACoB,gBAAgB,CAAE,KAAK,WAAW,EAAE;MAC5Dd,MAAM,CAACN,QAAQ,CAACoB,gBAAgB,CAAC,GAAG,EAAE;IAC1C;IACA,IAAIsB,0BAA0B,GAAG,IAAI3C,cAAc,CAAC,CAAC;IACrD2C,0BAA0B,CAACR,iBAAiB,GAAGA,iBAAiB;IAChEQ,0BAA0B,CAACP,gBAAgB,GAAGA,gBAAgB;IAC9DO,0BAA0B,CAACL,cAAc,GAAGA,cAAc;IAC1D;IACA,IAAI,OAAQD,gBAAiB,KAAK,WAAW,IAAIA,gBAAgB,KAAK,IAAI,IAAI,OAAQA,gBAAgB,CAACpC,QAAQ,CAACO,eAAe,CAAE,KAAK,WAAW,EAAE;MAC/ImC,0BAA0B,CAACC,eAAe,GAAG,IAAIP,gBAAgB,CAAC,CAAC;IACvE,CAAC,MACI;MACDM,0BAA0B,CAACE,gBAAgB,GAAGR,gBAAgB;IAClE;IACA;IACA,IAAI,OAAQ9B,MAAM,CAACN,QAAQ,CAACoB,gBAAgB,CAAC,CAACpB,QAAQ,CAACiB,gBAAgB,GAAG,GAAG,GAAGiB,iBAAiB,CAAE,KAAK,WAAW,EAAE;MACjH5B,MAAM,CAACN,QAAQ,CAACoB,gBAAgB,CAAC,CAACpB,QAAQ,CAACiB,gBAAgB,GAAG,GAAG,GAAGiB,iBAAiB,CAAC,GAAGQ,0BAA0B;IACvH,CAAC,MACI;MACD,MAAM,IAAI9B,KAAK,CAAC,8BAA8B,GAC1C,yEAAyE,GACzE,sBAAsB,GACtB,MAAM,GAAGsB,iBAAiB,GAAG,MAAM,CAAC;IAC5C;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}