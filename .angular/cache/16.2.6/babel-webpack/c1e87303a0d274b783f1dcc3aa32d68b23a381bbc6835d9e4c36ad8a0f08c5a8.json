{"ast":null,"code":"import { Any } from \"./any\";\nimport { OperationMode, PropertyConvertingMode, PropertyMatchingRule, ValueCheckingMode } from \"./json-convert-enums\";\nimport { Settings } from \"./json-convert-options\";\n/**\r\n * Offers a simple API for mapping JSON objects to TypeScript/JavaScript classes and vice versa.\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation on NPM\r\n */\nvar JsonConvert = /** @class */function () {\n  /////////////////\n  // CONSTRUCTOR //\n  /////////////////\n  /**\r\n   * Constructor.\r\n   *\r\n   * To learn more about the params, check the documentation of the equally named class properties.\r\n   *\r\n   * @param operationMode optional param (default: OperationMode.ENABLE)\r\n   * @param valueCheckingMode optional param (default: ValueCheckingMode.ALLOW_OBJECT_NULL)\r\n   * @param ignorePrimitiveChecks optional param (default: false)\r\n   * @param propertyMatchingRule optional param (default: PropertyMatchingRule.CASE_STRICT)\r\n   */\n  function JsonConvert(operationMode, valueCheckingMode, ignorePrimitiveChecks, propertyMatchingRule) {\n    ////////////////\n    // PROPERTIES //\n    ////////////////\n    /**\r\n     * Determines how the JsonConvert class instance should operate.\r\n     *\r\n     * You may assign three different values:\r\n     * - OperationMode.DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n     * - OperationMode.ENABLE: json2typescript is enabled, but only errors are logged\r\n     * - OperationMode.LOGGING: json2typescript is enabled and detailed information is logged\r\n     */\n    this._operationMode = OperationMode.ENABLE;\n    /**\r\n     * Determines which types are allowed to be null.\r\n     * This setting may be overridden by property settings (see PropertyConvertingMode).\r\n     *\r\n     * You may assign three different values:\r\n     * - ValueCheckingMode.ALLOW_NULL: all given values are allowed to be null\r\n     * - ValueCheckingMode.ALLOW_OBJECT_NULL: objects are allowed to be null, primitive types are not allowed to be null\r\n     * - ValueCheckingMode.DISALLOW_NULL: no null values are tolerated\r\n     */\n    this._valueCheckingMode = ValueCheckingMode.ALLOW_OBJECT_NULL;\n    /**\r\n     * Determines whether a missing or undefined property value should be considered as null or not.\r\n     *\r\n     * If true, a missing JSON value will be added and set as null before deserialization.\r\n     * For serialization, undefined values will be set to null before serialization.\r\n     *\r\n     * The ValueCheckingMode and PropertyConvertingMode determine whether an error will be thrown during\r\n     * serialization or deserialization.\r\n     */\n    this._mapUndefinedToNull = false;\n    /**\r\n     * Determines whether primitive types should be checked.\r\n     * If true, it will be allowed to assign primitive to other primitive types.\r\n     */\n    this._ignorePrimitiveChecks = false;\n    /**\r\n     * Determines the rule of how JSON properties shall be matched with class properties during deserialization.\r\n     *\r\n     * You may assign the following values:\r\n     * - PropertyMatchingRule.CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n     * - PropertyMatchingRule.CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they\r\n     * are not case sensitive\r\n     */\n    this._propertyMatchingRule = PropertyMatchingRule.CASE_STRICT;\n    /**\r\n     * Determines how nullable property types should be serialized and deserialized.\r\n     * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n     *\r\n     * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n     *\r\n     * The values should be used as follows:\r\n     * Determines how nullable property types should be serialized and deserialized.\r\n     * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n     *\r\n     * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n     *\r\n     * The values should be used as follows:\r\n     * - MAP_NULLABLE: the mapper is applied, type is checked\r\n     * - IGNORE_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n     * not added to the result\r\n     * - PASS_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n     * added with its value to the result\r\n     */\n    this._propertyConvertingMode = undefined;\n    /**\r\n     * Determines if discriminators should be used.\r\n     * If this option is set to true, all registered classes will be serialized with an additional discriminator\r\n     * property (default: \"$type\"), which has the key of the class (given in the @JsonObject decorator) as value.\r\n     * When deserializing an object containing the discriminator property, json2typescript will attempt to\r\n     * automatically instantiate the correct type (by comparing the value of the discriminator property with the\r\n     * registered classes).\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    this._useDiscriminator = false;\n    /**\r\n     * Defines the name of the discriminator property.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    this._discriminatorPropertyName = \"$type\";\n    /**\r\n     * Determines all classes which should use the lazy-loading or discriminator feature.\r\n     * Only classes provided here can be used with lazy-loading or the discriminator property.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    this._classes = new Map();\n    if (operationMode !== undefined && operationMode in OperationMode) this.operationMode = operationMode;\n    if (valueCheckingMode !== undefined && valueCheckingMode in ValueCheckingMode) this.valueCheckingMode = valueCheckingMode;\n    if (ignorePrimitiveChecks !== undefined) this.ignorePrimitiveChecks = ignorePrimitiveChecks;\n    if (propertyMatchingRule !== undefined) this.propertyMatchingRule = propertyMatchingRule;\n  }\n  Object.defineProperty(JsonConvert.prototype, \"operationMode\", {\n    /**\r\n     * Determines how the JsonConvert class instance should operate.\r\n     *\r\n     * You may assign three different values:\r\n     * - OperationMode.DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n     * - OperationMode.ENABLE: json2typescript is enabled, but only errors are logged\r\n     * - OperationMode.LOGGING: json2typescript is enabled and detailed information is logged\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._operationMode;\n    },\n    /**\r\n     * Determines how the JsonConvert class instance should operate.\r\n     *\r\n     * You may assign three different values:\r\n     * - OperationMode.DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n     * - OperationMode.ENABLE: json2typescript is enabled, but only errors are logged\r\n     * - OperationMode.LOGGING: json2typescript is enabled and detailed information is logged\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      if (value in OperationMode) this._operationMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"valueCheckingMode\", {\n    /**\r\n     * Determines which types are allowed to be null.\r\n     * This setting may be overridden by property settings (see PropertyConvertingMode).\r\n     *\r\n     * You may assign three different values:\r\n     * - ValueCheckingMode.ALLOW_NULL: all given values are allowed to be null\r\n     * - ValueCheckingMode.ALLOW_OBJECT_NULL: objects are allowed to be null, primitive types are not allowed to be null\r\n     * - ValueCheckingMode.DISALLOW_NULL: no null values are tolerated\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._valueCheckingMode;\n    },\n    /**\r\n     * Determines which types are allowed to be null.\r\n     * This setting may be overridden by property settings (see PropertyConvertingMode).\r\n     *\r\n     * You may assign three different values:\r\n     * - ValueCheckingMode.ALLOW_NULL: all given values are allowed to be null\r\n     * - ValueCheckingMode.ALLOW_OBJECT_NULL: objects are allowed to be null, primitive types are not allowed to be null\r\n     * - ValueCheckingMode.DISALLOW_NULL: no null values are tolerated\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      if (value in ValueCheckingMode) this._valueCheckingMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"mapUndefinedToNull\", {\n    /**\r\n     * Determines whether a missing or undefined property value should be considered as null or not.\r\n     *\r\n     * If true, a missing JSON value will be added and set as null before deserialization.\r\n     * For serialization, undefined values will be set to null before serialization.\r\n     *\r\n     * ValueCheckingMode and PropertyConvertingMode determine whether an error will be thrown during\r\n     * serialization or deserialization.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._mapUndefinedToNull;\n    },\n    /**\r\n     * Determines whether a missing or undefined property value should be considered as null or not.\r\n     *\r\n     * If true, a missing JSON value will be added and set as null before deserialization.\r\n     * For serialization, undefined values will be set to null before serialization.\r\n     *\r\n     * The ValueCheckingMode and PropertyConvertingMode determine whether an error will be thrown during\r\n     * serialization or deserialization.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      this._mapUndefinedToNull = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"ignorePrimitiveChecks\", {\n    /**\r\n     * Determines whether primitive types should be checked.\r\n     * If true, it will be allowed to assign primitive to other primitive types.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._ignorePrimitiveChecks;\n    },\n    /**\r\n     * Determines whether primitive types should be checked.\r\n     * If true, it will be allowed to assign primitive to other primitive types.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      this._ignorePrimitiveChecks = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"propertyMatchingRule\", {\n    /**\r\n     * Determines the rule of how JSON properties shall be matched with class properties during deserialization.\r\n     *\r\n     * You may assign the following values:\r\n     * - PropertyMatchingRule.CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n     * - PropertyMatchingRule.CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they\r\n     * are not case sensitive\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._propertyMatchingRule;\n    },\n    /**\r\n     * Determines the rule of how JSON properties shall be matched with class properties during deserialization.\r\n     *\r\n     * You may assign the following values:\r\n     * - PropertyMatchingRule.CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n     * - PropertyMatchingRule.CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they\r\n     * are not case sensitive\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      if (value in PropertyMatchingRule) this._propertyMatchingRule = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"propertyConvertingMode\", {\n    /**\r\n     * Determines how nullable property types should be serialized and deserialized.\r\n     * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n     *\r\n     * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n     *\r\n     * The values should be used as follows:\r\n     * - MAP_NULLABLE: the mapper is applied, type is checked\r\n     * - IGNORE_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n     * not added to the result\r\n     * - PASS_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n     * added with its value to the result\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._propertyConvertingMode;\n    },\n    /**\r\n     * Determines how nullable property types should be serialized and deserialized.\r\n     * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n     *\r\n     * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n     *\r\n     * The values should be used as follows:\r\n     * - MAP_NULLABLE: the mapper is applied, type is checked\r\n     * - IGNORE_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n     * not added to the result\r\n     * - PASS_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n     * added with its value to the result\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      this._propertyConvertingMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"ignoreRequiredCheck\", {\n    /**\r\n     * @deprecated\r\n     */\n    get: function () {\n      return this.propertyConvertingMode === PropertyConvertingMode.IGNORE_NULLABLE;\n    },\n    /**\r\n     * @deprecated\r\n     */\n    set: function (value) {\n      this.propertyConvertingMode = value ? PropertyConvertingMode.IGNORE_NULLABLE : undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"useDiscriminator\", {\n    /**\r\n     * Determines if discriminators should be used.\r\n     * If this option is set to true, all registered classes will be serialized with an additional discriminator\r\n     * property (default: \"$type\"), which has the key of the class (given in the @JsonObject decorator) as value.\r\n     * When deserializing an object containing the discriminator property, json2typescript will attempt to\r\n     * automatically instantiate the correct type (by comparing the value of the discriminator property with the\r\n     * registered classes).\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._useDiscriminator;\n    },\n    /**\r\n     * Determines if discriminators should be used.\r\n     * If this option is set to true, all registered classes will be serialized with an additional discriminator\r\n     * property (default: \"$type\"), which has the key of the class (given in the @JsonObject decorator) as value.\r\n     * When deserializing an object containing the discriminator property, json2typescript will attempt to\r\n     * automatically instantiate the correct type (by comparing the value of the discriminator property with the\r\n     * registered classes).\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      this._useDiscriminator = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"discriminatorPropertyName\", {\n    /**\r\n     * Defines the name of the discriminator property.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._discriminatorPropertyName;\n    },\n    /**\r\n     * Defines the name of the discriminator property.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    set: function (value) {\n      this._discriminatorPropertyName = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(JsonConvert.prototype, \"classes\", {\n    /**\r\n     * Determines all classes which should use the lazy-loading or discriminator feature.\r\n     * Only classes provided here can be used with lazy-loading or the discriminator property.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\n    get: function () {\n      return this._classes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ////////////////////\n  // PUBLIC METHODS //\n  ////////////////////\n  /**\r\n   * Registers a list of classes to be used in the discriminator feature.\r\n   * After registering these classes, they may be used for the discriminator feature.\r\n   *\r\n   * @param classReferences the class references\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.registerClasses = function () {\n    var _this = this;\n    var classReferences = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      classReferences[_i] = arguments[_i];\n    }\n    classReferences.forEach(function (classReference) {\n      var key = classReference.prototype[Settings.CLASS_IDENTIFIER] || classReference.name;\n      if (key) {\n        _this.classes.set(key, classReference);\n      }\n    });\n  };\n  /**\r\n   * Unregisters a list of classes from the discriminator feature.\r\n   * After unregistering these classes, they cannot be used anymore for the discriminator feature.\r\n   *\r\n   * @param classReferences the class references\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.unregisterClasses = function () {\n    var _this = this;\n    var classReferences = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      classReferences[_i] = arguments[_i];\n    }\n    classReferences.forEach(function (classReference) {\n      var key = classReference.prototype[Settings.CLASS_IDENTIFIER] || classReference.name;\n      _this.classes.delete(key);\n    });\n  };\n  /**\r\n   * Unregisters all classes from discriminator feature.\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.unregisterAllClasses = function () {\n    this.classes.clear();\n  };\n  /**\r\n   * Tries to serialize a TypeScript object or array of objects to JSON using the mappings defined on\r\n   * the specified class reference. Note that if a class reference is provided, it will be used as\r\n   * the source of property mapping for serialization, even if the object or one of its elements is\r\n   * an instance of a different class with its own mappings.  Also, ONLY the properties from the\r\n   * class reference will be serialized - any additional properties on the object(s) will be silently\r\n   * ignored.\r\n   *\r\n   * @param data object or array of objects\r\n   * @param classReference the class reference which provides the property mappings to use\r\n   *\r\n   * @returns the JSON object\r\n   *\r\n   * @throws an Error in case of failure\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.serialize = function (data, classReference) {\n    if (this.operationMode === OperationMode.DISABLE) {\n      return data;\n    }\n    // Call the appropriate method depending on the type\n    if (data instanceof Array) {\n      return this.serializeArray(data, classReference);\n    } else if (typeof data === \"object\") {\n      // careful: an array is an object in TypeScript!\n      return this.serializeObject(data, classReference);\n    } else {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter data in JsonConvert.serialize() is not in valid format (object or array).\" + \"\\n\");\n    }\n  };\n  /**\r\n   * Tries to serialize a TypeScript object to a JSON object using either the mappings on the\r\n   * provided class reference, if present, or on the provided object. Note that if a class\r\n   * reference is provided, it will be used as the source of property mapping for serialization,\r\n   * even if the object is itself an instance of a different class with its own mappings.\r\n   * Also, ONLY the properties from the class reference will be serialized - any additional\r\n   * properties on the object will be silently ignored.\r\n   *\r\n   * @param data object containing the values to be mapped to a JSON object, must be an\r\n   *             instance of a class with JSON mappings if no class reference is provided\r\n   * @param classReference optional class reference which provides the property mappings to use\r\n   *\r\n   * @returns the JSON object\r\n   *\r\n   * @throws an Error in case of failure\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.serializeObject = function (data, classReference) {\n    if (this.operationMode === OperationMode.DISABLE) {\n      return data;\n    }\n    data = this.mapUndefinedToNull && data === undefined ? null : data;\n    // Check if the passed type is allowed\n    if (data === undefined) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter instance in JsonConvert.serializeObject() is undefined. This is not a valid JSON format.\" + \"\\n\");\n    } else if (data === null) {\n      if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\n        throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter instance in JsonConvert.serializeObject() is null. You have specified to \" + \"disallow null values.\" + \"\\n\");\n      } else {\n        return data;\n      }\n    } else if (typeof data !== \"object\" || data instanceof Array) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter instance in JsonConvert.serializeObject() is not of type object.\" + \"\\n\");\n    }\n    // Now serialize and return the plain object\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"----------\");\n      console.log(\"Receiving JavaScript instance:\");\n      console.log(data);\n    }\n    var jsonObject = {};\n    var instance;\n    if (!!classReference) {\n      instance = new classReference();\n    } else {\n      instance = data;\n    }\n    // Loop through all initialized class properties on the mapping instance\n    for (var _i = 0, _a = Object.keys(instance); _i < _a.length; _i++) {\n      var propertyKey = _a[_i];\n      try {\n        this.serializeObject_loopProperty(data, instance, propertyKey, jsonObject);\n      } catch (ex) {\n        if (this.operationMode === OperationMode.LOGGING) {\n          console.log(\"Failed to serialize property:\");\n          console.log(ex);\n          console.log(\"----------\");\n        }\n        throw ex;\n      }\n    }\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"Returning JSON object:\");\n      console.log(jsonObject);\n      console.log(\"----------\");\n    }\n    return jsonObject;\n  };\n  /**\r\n   * Tries to serialize a TypeScript array to a JSON array using either the mappings on the\r\n   * provided class reference, if present, or on the provided object. Note that if a class\r\n   * reference is provided, ALL objects in the array will be serialized using the mappings\r\n   * from that class reference, even if they're actually instances of a different class.\r\n   * Also, ONLY the properties from the class reference will be serialized - any additional\r\n   * properties on the objects will be silently ignored.\r\n   *\r\n   * @param dataArray array of objects containing the values to be mapped to a JSON object, which\r\n   *                  must be instances of classes with JSON mappings if no class reference is provided\r\n   * @param classReference optional class reference which provides the property mappings to use\r\n   *\r\n   * @returns the JSON array\r\n   *\r\n   * @throws an Error in case of failure\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.serializeArray = function (dataArray, classReference) {\n    if (this.operationMode === OperationMode.DISABLE) {\n      return dataArray;\n    }\n    dataArray = this.mapUndefinedToNull && dataArray === undefined ? null : dataArray;\n    // Check if the passed type is allowed\n    if (dataArray === undefined) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter instanceArray in JsonConvert.serializeArray() is undefined. This is not a valid JSON format.\" + \"\\n\");\n    } else if (dataArray === null) {\n      if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\n        throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter instanceArray in JsonConvert.serializeArray() is null. You have specified to \" + \"disallow null values.\" + \"\\n\");\n      } else {\n        return dataArray;\n      }\n    } else if (typeof dataArray !== \"object\" || dataArray instanceof Array === false) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter instanceArray in JsonConvert.serializeArray() is not of type array.\" + \"\\n\");\n    }\n    // Now serialize and return the plain object\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"----------\");\n      console.log(\"Receiving JavaScript array:\");\n      console.log(dataArray);\n    }\n    var jsonArray = [];\n    // Loop through all array elements\n    for (var _i = 0, dataArray_1 = dataArray; _i < dataArray_1.length; _i++) {\n      var dataObject = dataArray_1[_i];\n      jsonArray.push(this.serializeObject(dataObject, classReference));\n    }\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"Returning JSON array:\");\n      console.log(jsonArray);\n      console.log(\"----------\");\n    }\n    return jsonArray;\n  };\n  /**\r\n   * Tries to deserialize given JSON to a TypeScript object or array of objects.\r\n   *\r\n   * @param json the JSON as object or array\r\n   * @param classReference the class reference\r\n   *\r\n   * @returns the deserialized data (TypeScript instance or array of TypeScript instances)\r\n   *\r\n   * @throws an Error in case of failure\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.deserialize = function (json, classReference) {\n    if (classReference === void 0) {\n      classReference = null;\n    }\n    if (this.operationMode === OperationMode.DISABLE) {\n      return json;\n    }\n    // Call the appropriate method depending on the type\n    if (json instanceof Array) {\n      return this.deserializeArray(json, classReference);\n    } else if (typeof json === \"object\") {\n      // careful: an array is an object in TypeScript!\n      return this.deserializeObject(json, classReference);\n    } else {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter json in JsonConvert.deserialize() is not in valid JSON format (object or array).\" + \"\\n\");\n    }\n  };\n  /**\r\n   * Tries to deserialize a JSON object to a TypeScript object.\r\n   *\r\n   * @param jsonObject the JSON object\r\n   * @param classReference the class reference\r\n   *\r\n   * @returns the deserialized TypeScript instance\r\n   *\r\n   * @throws an Error in case of failure\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.deserializeObject = function (jsonObject, classReference) {\n    if (classReference === void 0) {\n      classReference = null;\n    }\n    if (this.operationMode === OperationMode.DISABLE) {\n      return jsonObject;\n    }\n    var realClassReference = this.getRealClassReference(jsonObject, classReference);\n    jsonObject = this.mapUndefinedToNull && jsonObject === undefined ? null : jsonObject;\n    // Check if the passed type is allowed\n    if (jsonObject === undefined) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter jsonObject in JsonConvert.deserializeObject() is undefined. This is not a valid JSON format.\" + \"\\n\");\n    } else if (jsonObject === null) {\n      if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\n        throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter jsonObject in JsonConvert.deserializeObject() is null. You have specified to \" + \"disallow null values.\" + \"\\n\");\n      } else {\n        return jsonObject;\n      }\n    } else if (typeof jsonObject !== \"object\" || jsonObject instanceof Array) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter jsonObject in JsonConvert.deserializeObject() is not of type object.\" + \"\\n\");\n    }\n    // Now deserialize and return the instance\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"----------\");\n      console.log(\"Receiving JSON object:\");\n      console.log(jsonObject);\n    }\n    var instance = new realClassReference();\n    // Loop through all initialized class properties\n    for (var _i = 0, _a = Object.keys(instance); _i < _a.length; _i++) {\n      var propertyKey = _a[_i];\n      try {\n        this.deserializeObject_loopProperty(instance, propertyKey, jsonObject);\n      } catch (ex) {\n        if (this.operationMode === OperationMode.LOGGING) {\n          console.log(\"Failed to deserialize property:\");\n          console.log(ex);\n          console.log(\"----------\");\n        }\n        throw ex;\n      }\n    }\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"Returning CLASS instance:\");\n      console.log(instance);\n      console.log(\"----------\");\n    }\n    return instance;\n  };\n  /**\r\n   * Tries to deserialize a JSON array to a TypeScript array.\r\n   *\r\n   * @param jsonArray the JSON array\r\n   * @param classReference the object class\r\n   *\r\n   * @returns the deserialized array of TypeScript instances\r\n   *\r\n   * @throws an Error in case of failure\r\n   *\r\n   * @see https://www.npmjs.com/package/json2typescript full documentation\r\n   */\n  JsonConvert.prototype.deserializeArray = function (jsonArray, classReference) {\n    if (classReference === void 0) {\n      classReference = null;\n    }\n    if (this.operationMode === OperationMode.DISABLE) {\n      return jsonArray;\n    }\n    jsonArray = this.mapUndefinedToNull && jsonArray === undefined ? null : jsonArray;\n    // Check if the passed type is allowed\n    if (jsonArray === undefined) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter jsonArray in JsonConvert.deserializeObject() is undefined. This is not a valid JSON format.\" + \"\\n\");\n    } else if (jsonArray === null) {\n      if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\n        throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter jsonArray in JsonConvert.deserializeObject() is null. You have specified to \" + \"disallow null values.\" + \"\\n\");\n      } else {\n        return jsonArray;\n      }\n    } else if (typeof jsonArray !== \"object\" || jsonArray instanceof Array === false) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter jsonArray in JsonConvert.deserializeArray() is not of type array.\" + \"\\n\");\n    }\n    // Now deserialize and return the array\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"----------\");\n      console.log(\"Receiving JSON array:\");\n      console.log(jsonArray);\n    }\n    var array = [];\n    // Loop through all array elements\n    for (var _i = 0, jsonArray_1 = jsonArray; _i < jsonArray_1.length; _i++) {\n      var jsonObject = jsonArray_1[_i];\n      array.push(this.deserializeObject(jsonObject, classReference));\n    }\n    if (this.operationMode === OperationMode.LOGGING) {\n      console.log(\"Returning array of CLASS instances:\");\n      console.log(array);\n      console.log(\"----------\");\n    }\n    return array;\n  };\n  /////////////////////\n  // PRIVATE METHODS //\n  /////////////////////\n  /**\r\n   * Returns the correct class reference for the provided JSON object.\r\n   * If the provided class reference is null, the class reference is retrieved from the class map using the discriminator property.\r\n   *\r\n   * @param jsonObject the JSON object\r\n   * @param classReference the class reference\r\n   * @throws throws an Error in case of failure\r\n   */\n  JsonConvert.prototype.getRealClassReference = function (jsonObject, classReference) {\n    var _a;\n    // First determine if the discriminator is used or not\n    if (this.useDiscriminator) {\n      // Check if we find the $type property. If not, throw an error.\n      if (jsonObject.hasOwnProperty(this.discriminatorPropertyName)) {\n        var discriminatorValue = (_a = jsonObject[this.discriminatorPropertyName]) !== null && _a !== void 0 ? _a : \"\";\n        var classReferenceNameFromMap = this.classes.get(discriminatorValue);\n        if (classReferenceNameFromMap !== undefined && classReferenceNameFromMap !== null) {\n          return classReferenceNameFromMap;\n        } else {\n          throw new Error(\"Fatal error in JsonConvert. \" + \"Discriminator value \\\"\" + discriminatorValue + \"\\\" could not be found in the registered classes. \" + \"Make sure you register the class using the method JsonConvert.registerClasses(\" + discriminatorValue + \")\" + \"\\n\");\n        }\n      } else {\n        throw new Error(\"Fatal error in JsonConvert. \" + \"Discriminator property \\\"\" + this.discriminatorPropertyName + \"\\\" is missing in JSON object.\" + \"\\n\");\n      }\n    } else {\n      // Make sure the class reference is given for if the discriminator is disabled\n      if (classReference === null) {\n        throw new Error(\"Fatal error in JsonConvert. \" + \"Passed parameter classReference in JsonConvert.deserialize() is null. \" + \"This is only allowed if discriminator feature is enabled.\" + \"\\n\");\n      }\n      return classReference;\n    }\n  };\n  /**\r\n   * Tries to find the JSON mapping for a given class property from the given instance used for mapping,\r\n   * and finally assign the value from the given dataObject\r\n   *\r\n   * @param dataObject the object containing the value to be assigned\r\n   * @param instance the instance of the class used for mapping\r\n   * @param classPropertyName the property name\r\n   * @param json the JSON object\r\n   * @throws throws an Error in case of failure\r\n   */\n  JsonConvert.prototype.serializeObject_loopProperty = function (dataObject, instance, classPropertyName, json) {\n    var _this = this;\n    var _a, _b;\n    // Check if a JSON-object mapping is possible for a property\n    var mappingOptions = this.getClassPropertyMappingOptions(instance, classPropertyName);\n    if (mappingOptions === null) {\n      return;\n    }\n    // Get expected and real values\n    var jsonPropertyName = mappingOptions.jsonPropertyName;\n    var expectedJsonType = mappingOptions.expectedJsonType;\n    var convertingMode = (_a = this.propertyConvertingMode) !== null && _a !== void 0 ? _a : mappingOptions.convertingMode;\n    var customConverter = mappingOptions.customConverter;\n    var classInstancePropertyValue = dataObject[classPropertyName];\n    // Check if we have a nullable type\n    classInstancePropertyValue = this.mapUndefinedToNull && classInstancePropertyValue === undefined ? null : classInstancePropertyValue;\n    if (classInstancePropertyValue === undefined || classInstancePropertyValue === null) {\n      if (convertingMode === PropertyConvertingMode.IGNORE_NULLABLE) {\n        return;\n      }\n      if (convertingMode === PropertyConvertingMode.PASS_NULLABLE) {\n        json[jsonPropertyName] = classInstancePropertyValue;\n        return;\n      }\n    }\n    // Map the property\n    try {\n      json[jsonPropertyName] = customConverter !== null ? customConverter.serialize(classInstancePropertyValue) : this.convertProperty(expectedJsonType, classInstancePropertyValue, convertingMode, true);\n      var classConstructorName_1 = (_b = dataObject === null || dataObject === void 0 ? void 0 : dataObject.constructor) === null || _b === void 0 ? void 0 : _b.name;\n      if (this._useDiscriminator && json instanceof Object) {\n        this.classes.forEach(function (classDataObject, key) {\n          if (classDataObject.name === classConstructorName_1) {\n            json[_this._discriminatorPropertyName] = key;\n          }\n        });\n      }\n    } catch (e) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Failed to map the JavaScript instance of class \\\"\" + instance[Settings.CLASS_IDENTIFIER] + \"\\\" to JSON because of a type error.\\n\\n\" + \"\\tClass property: \\n\\t\\t\" + classPropertyName + \"\\n\\n\" + \"\\tClass property value: \\n\\t\\t\" + classInstancePropertyValue + \"\\n\\n\" + \"\\tExpected type: \\n\\t\\t\" + this.getExpectedType(expectedJsonType) + \"\\n\\n\" + \"\\tRuntime type: \\n\\t\\t\" + this.getTrueType(classInstancePropertyValue) + \"\\n\\n\" + \"\\tJSON property: \\n\\t\\t\" + jsonPropertyName + \"\\n\\n\" + e.message + \"\\n\");\n    }\n  };\n  /**\r\n   * Tries to find the JSON mapping for a given class property and finally assign the value.\r\n   *\r\n   * @param instance the instance of the class\r\n   * @param classPropertyName the property name\r\n   * @param json the JSON object\r\n   *\r\n   * @throws throws an Error in case of failure\r\n   */\n  JsonConvert.prototype.deserializeObject_loopProperty = function (instance, classPropertyName, json) {\n    var _a;\n    var mappingOptions = this.getClassPropertyMappingOptions(instance, classPropertyName);\n    if (mappingOptions === null) {\n      return;\n    }\n    // Get expected and real values\n    var jsonPropertyName = mappingOptions.jsonPropertyName;\n    var expectedJsonType = mappingOptions.expectedJsonType;\n    var convertingMode = (_a = this.propertyConvertingMode) !== null && _a !== void 0 ? _a : mappingOptions.convertingMode;\n    var customConverter = mappingOptions.customConverter;\n    var jsonValue = undefined;\n    try {\n      jsonValue = this.getObjectValue(json, jsonPropertyName);\n    } catch (_b) {}\n    // Check if we have a nullable type\n    jsonValue = this.mapUndefinedToNull && jsonValue === undefined ? null : jsonValue;\n    if (jsonValue === undefined || jsonValue === null) {\n      if (convertingMode === PropertyConvertingMode.IGNORE_NULLABLE) {\n        return;\n      }\n      if (convertingMode === PropertyConvertingMode.PASS_NULLABLE) {\n        instance[classPropertyName] = jsonValue;\n        return;\n      }\n    }\n    // Map the property\n    try {\n      var classConstructorName = jsonValue instanceof Object ? jsonValue[this.discriminatorPropertyName] : null;\n      if (this._useDiscriminator && this.classes.has(classConstructorName)) {\n        expectedJsonType = this.classes.get(classConstructorName);\n      }\n      instance[classPropertyName] = customConverter !== null ? customConverter.deserialize(jsonValue) : this.convertProperty(expectedJsonType, jsonValue, convertingMode);\n    } catch (e) {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"Failed to map the JSON object to the class \\\"\" + instance[Settings.CLASS_IDENTIFIER] + \"\\\" because of a type error.\\n\\n\" + \"\\tClass property: \\n\\t\\t\" + classPropertyName + \"\\n\\n\" + \"\\tExpected type: \\n\\t\\t\" + this.getExpectedType(expectedJsonType) + \"\\n\\n\" + \"\\tJSON property: \\n\\t\\t\" + jsonPropertyName + \"\\n\\n\" + \"\\tJSON type: \\n\\t\\t\" + this.getJsonType(jsonValue) + \"\\n\\n\" + \"\\tJSON value: \\n\\t\\t\" + JSON.stringify(jsonValue) + \"\\n\\n\" + e.message + \"\\n\");\n    }\n  };\n  ////////////////////\n  // HELPER METHODS //\n  ////////////////////\n  /**\r\n   * Gets the mapping options of a given class property.\r\n   *\r\n   * @param instance any class instance\r\n   * @param {string} propertyName any property name\r\n   *\r\n   * @returns {MappingOptions|null}\r\n   */\n  JsonConvert.prototype.getClassPropertyMappingOptions = function (instance, propertyName) {\n    var mappings = instance[Settings.MAPPING_PROPERTY];\n    // Check if mapping is defined\n    if (typeof mappings === \"undefined\") return null;\n    /* Find mapping by iterating up the prototype chain to find a matching mapping, rather than\r\n     * just searching by property name. */\n    var prototype = Object.getPrototypeOf(instance);\n    /* According to documentation, we'll hit null when we've iterated all the way up to the base\r\n     * Object, but check for undefined as well in case prototype has been manually set to\r\n     * undefined. Note that javascript detects circular prototype references and will cause a\r\n     * TypeError, so no need to check for self, the prototype chain will eventually terminate. */\n    while (prototype !== null && prototype !== undefined) {\n      var classIdentifier = prototype[Settings.CLASS_IDENTIFIER];\n      if (!!classIdentifier) {\n        var mappingName = classIdentifier + \".\" + propertyName;\n        if (typeof mappings[mappingName] !== \"undefined\") {\n          return mappings[mappingName];\n        }\n      }\n      prototype = Object.getPrototypeOf(prototype);\n    }\n    return null;\n  };\n  /**\r\n   * Compares the type of a given value with an internal expected json type.\r\n   * Either returns the resulting value or throws an exception.\r\n   *\r\n   * @param expectedType the expected type for the property\r\n   * @param value the property value to verify\r\n   * @param convertingMode the converting mode for this property\r\n   * @param serialize optional param (default: false), if given, we are in serialization mode\r\n   *\r\n   * @returns returns the resulted mapped property\r\n   *\r\n   * @throws an error in case of failure\r\n   */\n  JsonConvert.prototype.convertProperty = function (expectedType, value, convertingMode, serialize) {\n    ////////////////////////////\n    // Prior checks and setup //\n    ////////////////////////////\n    // Return the value immediately if we don't care about the type\n    if (expectedType === undefined || expectedType === Any || expectedType === null || expectedType === Object) {\n      return value;\n    }\n    // Check if we have a nullable type\n    value = this.mapUndefinedToNull && value === undefined ? null : value;\n    if (value === undefined || value === null) {\n      if (convertingMode === PropertyConvertingMode.IGNORE_NULLABLE) {\n        return undefined;\n      }\n      if (convertingMode === PropertyConvertingMode.PASS_NULLABLE) {\n        return value;\n      }\n    }\n    var expectedDimension = \"1\";\n    if (expectedType instanceof Array) {\n      expectedDimension = \"2\";\n    }\n    var valueDimension = \"1or2\";\n    if (value instanceof Array) {\n      valueDimension = \"2\";\n    } else if (!(value instanceof Object)) {\n      valueDimension = \"1\";\n    }\n    if (expectedDimension === \"1\" && valueDimension === \"2\") {\n      throw new Error(\"\\tReason: Expected a non-array type, but given value is an array.\");\n    }\n    if (expectedDimension === \"2\" && valueDimension === \"1\") {\n      // Allow to use null in the special case\n      if (value === null && this.valueCheckingMode !== ValueCheckingMode.DISALLOW_NULL) {\n        return null;\n      } else if (value === null) {\n        throw new Error(\"\\tReason: Expected an array, but given value is null.\");\n      }\n      throw new Error(\"\\tReason: Expected an array, but given value is a primitive type.\");\n    }\n    //////////////////\n    // Check values //\n    //////////////////\n    if (expectedDimension === \"2\" && (valueDimension === \"2\" || valueDimension === \"1or2\")) {\n      // Return an empty array if we have an empty array or object as value\n      if (value.length === 0 || Object.keys(value).length === 0) {\n        return [];\n      }\n      // Return the value if we don't care about the array type\n      if (expectedType.length === 0) {\n        return value;\n      }\n      // Copy the expectedJsonType array so we don't change the class-level mapping based on the value of this property\n      var jsonType = expectedType.slice(0);\n      var array = [];\n      if (valueDimension === \"2\") {\n        // Loop through the data. Both type and value are at least of length 1\n        var autofillType = jsonType.length < value.length;\n        for (var i = 0; i < value.length; i++) {\n          if (autofillType && i >= jsonType.length) {\n            jsonType[i] = jsonType[i - 1];\n          }\n          array[i] = this.convertProperty(jsonType[i], value[i], this.propertyConvertingMode || PropertyConvertingMode.MAP_NULLABLE, serialize);\n        }\n        return array;\n      } else {\n        // Loop through the data. Both type and value are at least of length 1\n        var autofillType = jsonType.length < Object.keys(value).length;\n        var i = 0;\n        for (var key in value) {\n          if (autofillType && i >= jsonType.length) {\n            jsonType[i] = jsonType[i - 1];\n          }\n          array[key] = this.convertProperty(jsonType[i], value[key], this.propertyConvertingMode || PropertyConvertingMode.MAP_NULLABLE, serialize);\n          i++;\n        }\n        return array;\n      }\n    } else if (expectedDimension === \"1\" && (valueDimension === \"1\" || valueDimension === \"1or2\")) {\n      // Check if objects match\n      if ((expectedType instanceof Object && [String, Number, Boolean].includes(expectedType) === false || typeof expectedType === \"string\") && value instanceof Object) {\n        // If the expected type is a string (means: lazy-loading), get the real type from the registered classes\n        if (typeof expectedType === \"string\") {\n          var realExpectedType = this.classes.get(expectedType);\n          if (!realExpectedType) {\n            throw new Error(\"\\tReason: Given expected type \\\"\" + expectedType + \"\\\" not registered with JsonConvert.registerClasses().\");\n          }\n          expectedType = realExpectedType;\n        }\n        if (expectedType.prototype.hasOwnProperty(Settings.CLASS_IDENTIFIER)) {\n          return serialize ? this.serializeObject(value, expectedType) : this.deserializeObject(value, expectedType);\n        } else {\n          return value;\n        }\n      } else {\n        // Check for null values\n        if (value === null) {\n          if (expectedType === String || expectedType === Number || expectedType === Boolean) {\n            if (this.valueCheckingMode === ValueCheckingMode.ALLOW_NULL) {\n              return null;\n            } else {\n              throw new Error(\"\\tReason: Given value null does not match the expected primitive type.\");\n            }\n          } else {\n            if (this.valueCheckingMode !== ValueCheckingMode.DISALLOW_NULL) {\n              return null;\n            } else {\n              throw new Error(\"\\tReason: Given value null does not match the expected object type.\");\n            }\n          }\n        }\n        // Check for primitive matches\n        if (expectedType === String && typeof value === \"string\" || expectedType === Number && typeof value === \"number\" || expectedType === Boolean && typeof value === \"boolean\") {\n          return value;\n        } else {\n          if (this.ignorePrimitiveChecks && [\"string\", \"number\", \"boolean\"].includes(typeof value)) {\n            return value;\n          }\n          throw new Error(\"\\tReason: Given value type does not match the expected primitive type.\");\n        }\n      }\n    }\n    // All other attempts are fatal\n    throw new Error(\"\\tReason: Mapping failed because of an unknown error.\");\n  };\n  /**\r\n   * Gets the value of an object for a given value.\r\n   * If the object does not have the specific key, an Error is thrown.\r\n   *\r\n   * @param data\r\n   * @param key\r\n   *\r\n   * @returns returns the value\r\n   *\r\n   * @throws an Error in case of the key was not found in the object\r\n   */\n  JsonConvert.prototype.getObjectValue = function (data, key) {\n    // If we do not care about the case of the key, ad\n    if (this.propertyMatchingRule === PropertyMatchingRule.CASE_INSENSITIVE) {\n      // Create a mapping of the keys: keys[lowercase]=normalcase\n      var keyMapping = Object.keys(data).reduce(function (keys, key) {\n        keys[key.toLowerCase()] = key;\n        return keys;\n      }, {});\n      // Define the new key\n      key = keyMapping[key.toLowerCase()];\n    }\n    // Throw an error if the key is not in the object\n    if (key in data === false) {\n      throw new Error();\n    }\n    return data[key];\n  };\n  ///////////////////////////\n  // JSON2TYPESCRIPT TYPES //\n  ///////////////////////////\n  /**\r\n   * Returns a string representation of the expected json type.\r\n   *\r\n   * @param expectedJsonType the expected type given from the decorator\r\n   *\r\n   * @returns {string} the string representation\r\n   */\n  JsonConvert.prototype.getExpectedType = function (expectedJsonType) {\n    var type = \"\";\n    if (expectedJsonType instanceof Array) {\n      type = \"[\";\n      for (var i = 0; i < expectedJsonType.length; i++) {\n        if (i > 0) type += \",\";\n        type += this.getExpectedType(expectedJsonType[i]);\n      }\n      type += \"]\";\n      return type;\n    } else {\n      if (expectedJsonType === Any || expectedJsonType === null || expectedJsonType === Object) {\n        return \"any\";\n      } else if (expectedJsonType === String || expectedJsonType === Boolean || expectedJsonType === Number) {\n        return new expectedJsonType().constructor.name.toLowerCase();\n      } else if (typeof expectedJsonType === \"function\") {\n        return new expectedJsonType().constructor.name;\n      } else if (typeof expectedJsonType === \"string\") {\n        return expectedJsonType;\n      } else if (expectedJsonType === undefined) {\n        return \"undefined\";\n      } else {\n        return \"?????\";\n      }\n    }\n  };\n  /**\r\n   * Returns a string representation of the JSON value type.\r\n   *\r\n   * @param jsonValue the JSON value\r\n   *\r\n   * @returns {string} the string representation\r\n   */\n  JsonConvert.prototype.getJsonType = function (jsonValue) {\n    if (jsonValue === null) return \"null\";\n    var type = \"\";\n    if (jsonValue instanceof Array) {\n      type = \"[\";\n      for (var i = 0; i < jsonValue.length; i++) {\n        if (i > 0) type += \",\";\n        type += this.getJsonType(jsonValue[i]);\n      }\n      type += \"]\";\n      return type;\n    } else {\n      return typeof jsonValue;\n    }\n  };\n  /**\r\n   * Returns a string representation of the true TypeScript type.\r\n   *\r\n   * @param trueValue the true value\r\n   *\r\n   * @returns {string} the string representation\r\n   */\n  JsonConvert.prototype.getTrueType = function (trueValue) {\n    return typeof trueValue;\n  };\n  return JsonConvert;\n}();\nexport { JsonConvert };","map":{"version":3,"names":["Any","OperationMode","PropertyConvertingMode","PropertyMatchingRule","ValueCheckingMode","Settings","JsonConvert","operationMode","valueCheckingMode","ignorePrimitiveChecks","propertyMatchingRule","_operationMode","ENABLE","_valueCheckingMode","ALLOW_OBJECT_NULL","_mapUndefinedToNull","_ignorePrimitiveChecks","_propertyMatchingRule","CASE_STRICT","_propertyConvertingMode","undefined","_useDiscriminator","_discriminatorPropertyName","_classes","Map","Object","defineProperty","prototype","get","set","value","enumerable","configurable","propertyConvertingMode","IGNORE_NULLABLE","registerClasses","_this","classReferences","_i","arguments","length","forEach","classReference","key","CLASS_IDENTIFIER","name","classes","unregisterClasses","delete","unregisterAllClasses","clear","serialize","data","DISABLE","Array","serializeArray","serializeObject","Error","mapUndefinedToNull","DISALLOW_NULL","LOGGING","console","log","jsonObject","instance","_a","keys","propertyKey","serializeObject_loopProperty","ex","dataArray","jsonArray","dataArray_1","dataObject","push","deserialize","json","deserializeArray","deserializeObject","realClassReference","getRealClassReference","deserializeObject_loopProperty","array","jsonArray_1","useDiscriminator","hasOwnProperty","discriminatorPropertyName","discriminatorValue","classReferenceNameFromMap","classPropertyName","_b","mappingOptions","getClassPropertyMappingOptions","jsonPropertyName","expectedJsonType","convertingMode","customConverter","classInstancePropertyValue","PASS_NULLABLE","convertProperty","classConstructorName_1","constructor","classDataObject","e","getExpectedType","getTrueType","message","jsonValue","getObjectValue","classConstructorName","has","getJsonType","JSON","stringify","propertyName","mappings","MAPPING_PROPERTY","getPrototypeOf","classIdentifier","mappingName","expectedType","expectedDimension","valueDimension","jsonType","slice","autofillType","i","MAP_NULLABLE","String","Number","Boolean","includes","realExpectedType","ALLOW_NULL","CASE_INSENSITIVE","keyMapping","reduce","toLowerCase","type","trueValue"],"sources":["D:/PWS/WareHouseManagement/node_modules/json2typescript/lib/esm/src/json2typescript/json-convert.js"],"sourcesContent":["import { Any } from \"./any\";\r\nimport { OperationMode, PropertyConvertingMode, PropertyMatchingRule, ValueCheckingMode } from \"./json-convert-enums\";\r\nimport { Settings } from \"./json-convert-options\";\r\n/**\r\n * Offers a simple API for mapping JSON objects to TypeScript/JavaScript classes and vice versa.\r\n *\r\n * @see https://www.npmjs.com/package/json2typescript full documentation on NPM\r\n */\r\nvar JsonConvert = /** @class */ (function () {\r\n    /////////////////\r\n    // CONSTRUCTOR //\r\n    /////////////////\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * To learn more about the params, check the documentation of the equally named class properties.\r\n     *\r\n     * @param operationMode optional param (default: OperationMode.ENABLE)\r\n     * @param valueCheckingMode optional param (default: ValueCheckingMode.ALLOW_OBJECT_NULL)\r\n     * @param ignorePrimitiveChecks optional param (default: false)\r\n     * @param propertyMatchingRule optional param (default: PropertyMatchingRule.CASE_STRICT)\r\n     */\r\n    function JsonConvert(operationMode, valueCheckingMode, ignorePrimitiveChecks, propertyMatchingRule) {\r\n        ////////////////\r\n        // PROPERTIES //\r\n        ////////////////\r\n        /**\r\n         * Determines how the JsonConvert class instance should operate.\r\n         *\r\n         * You may assign three different values:\r\n         * - OperationMode.DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n         * - OperationMode.ENABLE: json2typescript is enabled, but only errors are logged\r\n         * - OperationMode.LOGGING: json2typescript is enabled and detailed information is logged\r\n         */\r\n        this._operationMode = OperationMode.ENABLE;\r\n        /**\r\n         * Determines which types are allowed to be null.\r\n         * This setting may be overridden by property settings (see PropertyConvertingMode).\r\n         *\r\n         * You may assign three different values:\r\n         * - ValueCheckingMode.ALLOW_NULL: all given values are allowed to be null\r\n         * - ValueCheckingMode.ALLOW_OBJECT_NULL: objects are allowed to be null, primitive types are not allowed to be null\r\n         * - ValueCheckingMode.DISALLOW_NULL: no null values are tolerated\r\n         */\r\n        this._valueCheckingMode = ValueCheckingMode.ALLOW_OBJECT_NULL;\r\n        /**\r\n         * Determines whether a missing or undefined property value should be considered as null or not.\r\n         *\r\n         * If true, a missing JSON value will be added and set as null before deserialization.\r\n         * For serialization, undefined values will be set to null before serialization.\r\n         *\r\n         * The ValueCheckingMode and PropertyConvertingMode determine whether an error will be thrown during\r\n         * serialization or deserialization.\r\n         */\r\n        this._mapUndefinedToNull = false;\r\n        /**\r\n         * Determines whether primitive types should be checked.\r\n         * If true, it will be allowed to assign primitive to other primitive types.\r\n         */\r\n        this._ignorePrimitiveChecks = false;\r\n        /**\r\n         * Determines the rule of how JSON properties shall be matched with class properties during deserialization.\r\n         *\r\n         * You may assign the following values:\r\n         * - PropertyMatchingRule.CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n         * - PropertyMatchingRule.CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they\r\n         * are not case sensitive\r\n         */\r\n        this._propertyMatchingRule = PropertyMatchingRule.CASE_STRICT;\r\n        /**\r\n         * Determines how nullable property types should be serialized and deserialized.\r\n         * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n         *\r\n         * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n         *\r\n         * The values should be used as follows:\r\n         * Determines how nullable property types should be serialized and deserialized.\r\n         * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n         *\r\n         * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n         *\r\n         * The values should be used as follows:\r\n         * - MAP_NULLABLE: the mapper is applied, type is checked\r\n         * - IGNORE_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n         * not added to the result\r\n         * - PASS_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n         * added with its value to the result\r\n         */\r\n        this._propertyConvertingMode = undefined;\r\n        /**\r\n         * Determines if discriminators should be used.\r\n         * If this option is set to true, all registered classes will be serialized with an additional discriminator\r\n         * property (default: \"$type\"), which has the key of the class (given in the @JsonObject decorator) as value.\r\n         * When deserializing an object containing the discriminator property, json2typescript will attempt to\r\n         * automatically instantiate the correct type (by comparing the value of the discriminator property with the\r\n         * registered classes).\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        this._useDiscriminator = false;\r\n        /**\r\n         * Defines the name of the discriminator property.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        this._discriminatorPropertyName = \"$type\";\r\n        /**\r\n         * Determines all classes which should use the lazy-loading or discriminator feature.\r\n         * Only classes provided here can be used with lazy-loading or the discriminator property.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        this._classes = new Map();\r\n        if (operationMode !== undefined && operationMode in OperationMode)\r\n            this.operationMode = operationMode;\r\n        if (valueCheckingMode !== undefined && valueCheckingMode in ValueCheckingMode)\r\n            this.valueCheckingMode = valueCheckingMode;\r\n        if (ignorePrimitiveChecks !== undefined)\r\n            this.ignorePrimitiveChecks = ignorePrimitiveChecks;\r\n        if (propertyMatchingRule !== undefined)\r\n            this.propertyMatchingRule = propertyMatchingRule;\r\n    }\r\n    Object.defineProperty(JsonConvert.prototype, \"operationMode\", {\r\n        /**\r\n         * Determines how the JsonConvert class instance should operate.\r\n         *\r\n         * You may assign three different values:\r\n         * - OperationMode.DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n         * - OperationMode.ENABLE: json2typescript is enabled, but only errors are logged\r\n         * - OperationMode.LOGGING: json2typescript is enabled and detailed information is logged\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._operationMode;\r\n        },\r\n        /**\r\n         * Determines how the JsonConvert class instance should operate.\r\n         *\r\n         * You may assign three different values:\r\n         * - OperationMode.DISABLE: json2typescript will be disabled, no type checking or mapping is done\r\n         * - OperationMode.ENABLE: json2typescript is enabled, but only errors are logged\r\n         * - OperationMode.LOGGING: json2typescript is enabled and detailed information is logged\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            if (value in OperationMode)\r\n                this._operationMode = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"valueCheckingMode\", {\r\n        /**\r\n         * Determines which types are allowed to be null.\r\n         * This setting may be overridden by property settings (see PropertyConvertingMode).\r\n         *\r\n         * You may assign three different values:\r\n         * - ValueCheckingMode.ALLOW_NULL: all given values are allowed to be null\r\n         * - ValueCheckingMode.ALLOW_OBJECT_NULL: objects are allowed to be null, primitive types are not allowed to be null\r\n         * - ValueCheckingMode.DISALLOW_NULL: no null values are tolerated\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._valueCheckingMode;\r\n        },\r\n        /**\r\n         * Determines which types are allowed to be null.\r\n         * This setting may be overridden by property settings (see PropertyConvertingMode).\r\n         *\r\n         * You may assign three different values:\r\n         * - ValueCheckingMode.ALLOW_NULL: all given values are allowed to be null\r\n         * - ValueCheckingMode.ALLOW_OBJECT_NULL: objects are allowed to be null, primitive types are not allowed to be null\r\n         * - ValueCheckingMode.DISALLOW_NULL: no null values are tolerated\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            if (value in ValueCheckingMode)\r\n                this._valueCheckingMode = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"mapUndefinedToNull\", {\r\n        /**\r\n         * Determines whether a missing or undefined property value should be considered as null or not.\r\n         *\r\n         * If true, a missing JSON value will be added and set as null before deserialization.\r\n         * For serialization, undefined values will be set to null before serialization.\r\n         *\r\n         * ValueCheckingMode and PropertyConvertingMode determine whether an error will be thrown during\r\n         * serialization or deserialization.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._mapUndefinedToNull;\r\n        },\r\n        /**\r\n         * Determines whether a missing or undefined property value should be considered as null or not.\r\n         *\r\n         * If true, a missing JSON value will be added and set as null before deserialization.\r\n         * For serialization, undefined values will be set to null before serialization.\r\n         *\r\n         * The ValueCheckingMode and PropertyConvertingMode determine whether an error will be thrown during\r\n         * serialization or deserialization.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            this._mapUndefinedToNull = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"ignorePrimitiveChecks\", {\r\n        /**\r\n         * Determines whether primitive types should be checked.\r\n         * If true, it will be allowed to assign primitive to other primitive types.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._ignorePrimitiveChecks;\r\n        },\r\n        /**\r\n         * Determines whether primitive types should be checked.\r\n         * If true, it will be allowed to assign primitive to other primitive types.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            this._ignorePrimitiveChecks = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"propertyMatchingRule\", {\r\n        /**\r\n         * Determines the rule of how JSON properties shall be matched with class properties during deserialization.\r\n         *\r\n         * You may assign the following values:\r\n         * - PropertyMatchingRule.CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n         * - PropertyMatchingRule.CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they\r\n         * are not case sensitive\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._propertyMatchingRule;\r\n        },\r\n        /**\r\n         * Determines the rule of how JSON properties shall be matched with class properties during deserialization.\r\n         *\r\n         * You may assign the following values:\r\n         * - PropertyMatchingRule.CASE_STRICT: JSON properties need to match exactly the names in the decorators\r\n         * - PropertyMatchingRule.CASE_INSENSITIVE: JSON properties need to match names in the decorators, but names they\r\n         * are not case sensitive\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            if (value in PropertyMatchingRule)\r\n                this._propertyMatchingRule = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"propertyConvertingMode\", {\r\n        /**\r\n         * Determines how nullable property types should be serialized and deserialized.\r\n         * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n         *\r\n         * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n         *\r\n         * The values should be used as follows:\r\n         * - MAP_NULLABLE: the mapper is applied, type is checked\r\n         * - IGNORE_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n         * not added to the result\r\n         * - PASS_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n         * added with its value to the result\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._propertyConvertingMode;\r\n        },\r\n        /**\r\n         * Determines how nullable property types should be serialized and deserialized.\r\n         * Nullable types are either missing (in JSON), undefined (in TypeScript) or null (both).\r\n         *\r\n         * If the propertyConvertingMode has a non-undefined value, it overrides the individual settings of every property.\r\n         *\r\n         * The values should be used as follows:\r\n         * - MAP_NULLABLE: the mapper is applied, type is checked\r\n         * - IGNORE_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n         * not added to the result\r\n         * - PASS_NULLABLE: the mapper is not applied if the property is missing, undefined or null; the property is\r\n         * added with its value to the result\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            this._propertyConvertingMode = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"ignoreRequiredCheck\", {\r\n        /**\r\n         * @deprecated\r\n         */\r\n        get: function () {\r\n            return this.propertyConvertingMode === PropertyConvertingMode.IGNORE_NULLABLE;\r\n        },\r\n        /**\r\n         * @deprecated\r\n         */\r\n        set: function (value) {\r\n            this.propertyConvertingMode = value ? PropertyConvertingMode.IGNORE_NULLABLE : undefined;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"useDiscriminator\", {\r\n        /**\r\n         * Determines if discriminators should be used.\r\n         * If this option is set to true, all registered classes will be serialized with an additional discriminator\r\n         * property (default: \"$type\"), which has the key of the class (given in the @JsonObject decorator) as value.\r\n         * When deserializing an object containing the discriminator property, json2typescript will attempt to\r\n         * automatically instantiate the correct type (by comparing the value of the discriminator property with the\r\n         * registered classes).\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._useDiscriminator;\r\n        },\r\n        /**\r\n         * Determines if discriminators should be used.\r\n         * If this option is set to true, all registered classes will be serialized with an additional discriminator\r\n         * property (default: \"$type\"), which has the key of the class (given in the @JsonObject decorator) as value.\r\n         * When deserializing an object containing the discriminator property, json2typescript will attempt to\r\n         * automatically instantiate the correct type (by comparing the value of the discriminator property with the\r\n         * registered classes).\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            this._useDiscriminator = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"discriminatorPropertyName\", {\r\n        /**\r\n         * Defines the name of the discriminator property.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._discriminatorPropertyName;\r\n        },\r\n        /**\r\n         * Defines the name of the discriminator property.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        set: function (value) {\r\n            this._discriminatorPropertyName = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(JsonConvert.prototype, \"classes\", {\r\n        /**\r\n         * Determines all classes which should use the lazy-loading or discriminator feature.\r\n         * Only classes provided here can be used with lazy-loading or the discriminator property.\r\n         *\r\n         * @see https://www.npmjs.com/package/json2typescript full documentation\r\n         */\r\n        get: function () {\r\n            return this._classes;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ////////////////////\r\n    // PUBLIC METHODS //\r\n    ////////////////////\r\n    /**\r\n     * Registers a list of classes to be used in the discriminator feature.\r\n     * After registering these classes, they may be used for the discriminator feature.\r\n     *\r\n     * @param classReferences the class references\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.registerClasses = function () {\r\n        var _this = this;\r\n        var classReferences = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            classReferences[_i] = arguments[_i];\r\n        }\r\n        classReferences.forEach(function (classReference) {\r\n            var key = classReference.prototype[Settings.CLASS_IDENTIFIER] || classReference.name;\r\n            if (key) {\r\n                _this.classes.set(key, classReference);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Unregisters a list of classes from the discriminator feature.\r\n     * After unregistering these classes, they cannot be used anymore for the discriminator feature.\r\n     *\r\n     * @param classReferences the class references\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.unregisterClasses = function () {\r\n        var _this = this;\r\n        var classReferences = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            classReferences[_i] = arguments[_i];\r\n        }\r\n        classReferences.forEach(function (classReference) {\r\n            var key = classReference.prototype[Settings.CLASS_IDENTIFIER] || classReference.name;\r\n            _this.classes.delete(key);\r\n        });\r\n    };\r\n    /**\r\n     * Unregisters all classes from discriminator feature.\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.unregisterAllClasses = function () {\r\n        this.classes.clear();\r\n    };\r\n    /**\r\n     * Tries to serialize a TypeScript object or array of objects to JSON using the mappings defined on\r\n     * the specified class reference. Note that if a class reference is provided, it will be used as\r\n     * the source of property mapping for serialization, even if the object or one of its elements is\r\n     * an instance of a different class with its own mappings.  Also, ONLY the properties from the\r\n     * class reference will be serialized - any additional properties on the object(s) will be silently\r\n     * ignored.\r\n     *\r\n     * @param data object or array of objects\r\n     * @param classReference the class reference which provides the property mappings to use\r\n     *\r\n     * @returns the JSON object\r\n     *\r\n     * @throws an Error in case of failure\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.serialize = function (data, classReference) {\r\n        if (this.operationMode === OperationMode.DISABLE) {\r\n            return data;\r\n        }\r\n        // Call the appropriate method depending on the type\r\n        if (data instanceof Array) {\r\n            return this.serializeArray(data, classReference);\r\n        }\r\n        else if (typeof data === \"object\") { // careful: an array is an object in TypeScript!\r\n            return this.serializeObject(data, classReference);\r\n        }\r\n        else {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter data in JsonConvert.serialize() is not in valid format (object or array).\" +\r\n                \"\\n\");\r\n        }\r\n    };\r\n    /**\r\n     * Tries to serialize a TypeScript object to a JSON object using either the mappings on the\r\n     * provided class reference, if present, or on the provided object. Note that if a class\r\n     * reference is provided, it will be used as the source of property mapping for serialization,\r\n     * even if the object is itself an instance of a different class with its own mappings.\r\n     * Also, ONLY the properties from the class reference will be serialized - any additional\r\n     * properties on the object will be silently ignored.\r\n     *\r\n     * @param data object containing the values to be mapped to a JSON object, must be an\r\n     *             instance of a class with JSON mappings if no class reference is provided\r\n     * @param classReference optional class reference which provides the property mappings to use\r\n     *\r\n     * @returns the JSON object\r\n     *\r\n     * @throws an Error in case of failure\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.serializeObject = function (data, classReference) {\r\n        if (this.operationMode === OperationMode.DISABLE) {\r\n            return data;\r\n        }\r\n        data = this.mapUndefinedToNull && data === undefined ? null : data;\r\n        // Check if the passed type is allowed\r\n        if (data === undefined) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter instance in JsonConvert.serializeObject() is undefined. This is not a valid JSON format.\" +\r\n                \"\\n\");\r\n        }\r\n        else if (data === null) {\r\n            if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\r\n                throw new Error(\"Fatal error in JsonConvert. \" +\r\n                    \"Passed parameter instance in JsonConvert.serializeObject() is null. You have specified to \" +\r\n                    \"disallow null values.\" +\r\n                    \"\\n\");\r\n            }\r\n            else {\r\n                return data;\r\n            }\r\n        }\r\n        else if (typeof (data) !== \"object\" || data instanceof Array) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter instance in JsonConvert.serializeObject() is not of type object.\" +\r\n                \"\\n\");\r\n        }\r\n        // Now serialize and return the plain object\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"----------\");\r\n            console.log(\"Receiving JavaScript instance:\");\r\n            console.log(data);\r\n        }\r\n        var jsonObject = {};\r\n        var instance;\r\n        if (!!classReference) {\r\n            instance = new classReference();\r\n        }\r\n        else {\r\n            instance = data;\r\n        }\r\n        // Loop through all initialized class properties on the mapping instance\r\n        for (var _i = 0, _a = Object.keys(instance); _i < _a.length; _i++) {\r\n            var propertyKey = _a[_i];\r\n            try {\r\n                this.serializeObject_loopProperty(data, instance, propertyKey, jsonObject);\r\n            }\r\n            catch (ex) {\r\n                if (this.operationMode === OperationMode.LOGGING) {\r\n                    console.log(\"Failed to serialize property:\");\r\n                    console.log(ex);\r\n                    console.log(\"----------\");\r\n                }\r\n                throw ex;\r\n            }\r\n        }\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"Returning JSON object:\");\r\n            console.log(jsonObject);\r\n            console.log(\"----------\");\r\n        }\r\n        return jsonObject;\r\n    };\r\n    /**\r\n     * Tries to serialize a TypeScript array to a JSON array using either the mappings on the\r\n     * provided class reference, if present, or on the provided object. Note that if a class\r\n     * reference is provided, ALL objects in the array will be serialized using the mappings\r\n     * from that class reference, even if they're actually instances of a different class.\r\n     * Also, ONLY the properties from the class reference will be serialized - any additional\r\n     * properties on the objects will be silently ignored.\r\n     *\r\n     * @param dataArray array of objects containing the values to be mapped to a JSON object, which\r\n     *                  must be instances of classes with JSON mappings if no class reference is provided\r\n     * @param classReference optional class reference which provides the property mappings to use\r\n     *\r\n     * @returns the JSON array\r\n     *\r\n     * @throws an Error in case of failure\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.serializeArray = function (dataArray, classReference) {\r\n        if (this.operationMode === OperationMode.DISABLE) {\r\n            return dataArray;\r\n        }\r\n        dataArray = this.mapUndefinedToNull && dataArray === undefined ? null : dataArray;\r\n        // Check if the passed type is allowed\r\n        if (dataArray === undefined) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter instanceArray in JsonConvert.serializeArray() is undefined. This is not a valid JSON format.\" +\r\n                \"\\n\");\r\n        }\r\n        else if (dataArray === null) {\r\n            if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\r\n                throw new Error(\"Fatal error in JsonConvert. \" +\r\n                    \"Passed parameter instanceArray in JsonConvert.serializeArray() is null. You have specified to \" +\r\n                    \"disallow null values.\" +\r\n                    \"\\n\");\r\n            }\r\n            else {\r\n                return dataArray;\r\n            }\r\n        }\r\n        else if (typeof (dataArray) !== \"object\" || dataArray instanceof Array === false) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter instanceArray in JsonConvert.serializeArray() is not of type array.\" +\r\n                \"\\n\");\r\n        }\r\n        // Now serialize and return the plain object\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"----------\");\r\n            console.log(\"Receiving JavaScript array:\");\r\n            console.log(dataArray);\r\n        }\r\n        var jsonArray = [];\r\n        // Loop through all array elements\r\n        for (var _i = 0, dataArray_1 = dataArray; _i < dataArray_1.length; _i++) {\r\n            var dataObject = dataArray_1[_i];\r\n            jsonArray.push(this.serializeObject(dataObject, classReference));\r\n        }\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"Returning JSON array:\");\r\n            console.log(jsonArray);\r\n            console.log(\"----------\");\r\n        }\r\n        return jsonArray;\r\n    };\r\n    /**\r\n     * Tries to deserialize given JSON to a TypeScript object or array of objects.\r\n     *\r\n     * @param json the JSON as object or array\r\n     * @param classReference the class reference\r\n     *\r\n     * @returns the deserialized data (TypeScript instance or array of TypeScript instances)\r\n     *\r\n     * @throws an Error in case of failure\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.deserialize = function (json, classReference) {\r\n        if (classReference === void 0) { classReference = null; }\r\n        if (this.operationMode === OperationMode.DISABLE) {\r\n            return json;\r\n        }\r\n        // Call the appropriate method depending on the type\r\n        if (json instanceof Array) {\r\n            return this.deserializeArray(json, classReference);\r\n        }\r\n        else if (typeof json === \"object\") { // careful: an array is an object in TypeScript!\r\n            return this.deserializeObject(json, classReference);\r\n        }\r\n        else {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter json in JsonConvert.deserialize() is not in valid JSON format (object or array).\" +\r\n                \"\\n\");\r\n        }\r\n    };\r\n    /**\r\n     * Tries to deserialize a JSON object to a TypeScript object.\r\n     *\r\n     * @param jsonObject the JSON object\r\n     * @param classReference the class reference\r\n     *\r\n     * @returns the deserialized TypeScript instance\r\n     *\r\n     * @throws an Error in case of failure\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.deserializeObject = function (jsonObject, classReference) {\r\n        if (classReference === void 0) { classReference = null; }\r\n        if (this.operationMode === OperationMode.DISABLE) {\r\n            return jsonObject;\r\n        }\r\n        var realClassReference = this.getRealClassReference(jsonObject, classReference);\r\n        jsonObject = this.mapUndefinedToNull && jsonObject === undefined ? null : jsonObject;\r\n        // Check if the passed type is allowed\r\n        if (jsonObject === undefined) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter jsonObject in JsonConvert.deserializeObject() is undefined. This is not a valid JSON format.\" +\r\n                \"\\n\");\r\n        }\r\n        else if (jsonObject === null) {\r\n            if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\r\n                throw new Error(\"Fatal error in JsonConvert. \" +\r\n                    \"Passed parameter jsonObject in JsonConvert.deserializeObject() is null. You have specified to \" +\r\n                    \"disallow null values.\" +\r\n                    \"\\n\");\r\n            }\r\n            else {\r\n                return jsonObject;\r\n            }\r\n        }\r\n        else if (typeof (jsonObject) !== \"object\" || jsonObject instanceof Array) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter jsonObject in JsonConvert.deserializeObject() is not of type object.\" +\r\n                \"\\n\");\r\n        }\r\n        // Now deserialize and return the instance\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"----------\");\r\n            console.log(\"Receiving JSON object:\");\r\n            console.log(jsonObject);\r\n        }\r\n        var instance = new realClassReference();\r\n        // Loop through all initialized class properties\r\n        for (var _i = 0, _a = Object.keys(instance); _i < _a.length; _i++) {\r\n            var propertyKey = _a[_i];\r\n            try {\r\n                this.deserializeObject_loopProperty(instance, propertyKey, jsonObject);\r\n            }\r\n            catch (ex) {\r\n                if (this.operationMode === OperationMode.LOGGING) {\r\n                    console.log(\"Failed to deserialize property:\");\r\n                    console.log(ex);\r\n                    console.log(\"----------\");\r\n                }\r\n                throw ex;\r\n            }\r\n        }\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"Returning CLASS instance:\");\r\n            console.log(instance);\r\n            console.log(\"----------\");\r\n        }\r\n        return instance;\r\n    };\r\n    /**\r\n     * Tries to deserialize a JSON array to a TypeScript array.\r\n     *\r\n     * @param jsonArray the JSON array\r\n     * @param classReference the object class\r\n     *\r\n     * @returns the deserialized array of TypeScript instances\r\n     *\r\n     * @throws an Error in case of failure\r\n     *\r\n     * @see https://www.npmjs.com/package/json2typescript full documentation\r\n     */\r\n    JsonConvert.prototype.deserializeArray = function (jsonArray, classReference) {\r\n        if (classReference === void 0) { classReference = null; }\r\n        if (this.operationMode === OperationMode.DISABLE) {\r\n            return jsonArray;\r\n        }\r\n        jsonArray = this.mapUndefinedToNull && jsonArray === undefined ? null : jsonArray;\r\n        // Check if the passed type is allowed\r\n        if (jsonArray === undefined) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter jsonArray in JsonConvert.deserializeObject() is undefined. This is not a valid JSON format.\" +\r\n                \"\\n\");\r\n        }\r\n        else if (jsonArray === null) {\r\n            if (this.valueCheckingMode === ValueCheckingMode.DISALLOW_NULL) {\r\n                throw new Error(\"Fatal error in JsonConvert. \" +\r\n                    \"Passed parameter jsonArray in JsonConvert.deserializeObject() is null. You have specified to \" +\r\n                    \"disallow null values.\" +\r\n                    \"\\n\");\r\n            }\r\n            else {\r\n                return jsonArray;\r\n            }\r\n        }\r\n        else if (typeof (jsonArray) !== \"object\" || jsonArray instanceof Array === false) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Passed parameter jsonArray in JsonConvert.deserializeArray() is not of type array.\" +\r\n                \"\\n\");\r\n        }\r\n        // Now deserialize and return the array\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"----------\");\r\n            console.log(\"Receiving JSON array:\");\r\n            console.log(jsonArray);\r\n        }\r\n        var array = [];\r\n        // Loop through all array elements\r\n        for (var _i = 0, jsonArray_1 = jsonArray; _i < jsonArray_1.length; _i++) {\r\n            var jsonObject = jsonArray_1[_i];\r\n            array.push(this.deserializeObject(jsonObject, classReference));\r\n        }\r\n        if (this.operationMode === OperationMode.LOGGING) {\r\n            console.log(\"Returning array of CLASS instances:\");\r\n            console.log(array);\r\n            console.log(\"----------\");\r\n        }\r\n        return array;\r\n    };\r\n    /////////////////////\r\n    // PRIVATE METHODS //\r\n    /////////////////////\r\n    /**\r\n     * Returns the correct class reference for the provided JSON object.\r\n     * If the provided class reference is null, the class reference is retrieved from the class map using the discriminator property.\r\n     *\r\n     * @param jsonObject the JSON object\r\n     * @param classReference the class reference\r\n     * @throws throws an Error in case of failure\r\n     */\r\n    JsonConvert.prototype.getRealClassReference = function (jsonObject, classReference) {\r\n        var _a;\r\n        // First determine if the discriminator is used or not\r\n        if (this.useDiscriminator) {\r\n            // Check if we find the $type property. If not, throw an error.\r\n            if (jsonObject.hasOwnProperty(this.discriminatorPropertyName)) {\r\n                var discriminatorValue = (_a = jsonObject[this.discriminatorPropertyName]) !== null && _a !== void 0 ? _a : \"\";\r\n                var classReferenceNameFromMap = this.classes.get(discriminatorValue);\r\n                if (classReferenceNameFromMap !== undefined && classReferenceNameFromMap !== null) {\r\n                    return classReferenceNameFromMap;\r\n                }\r\n                else {\r\n                    throw new Error(\"Fatal error in JsonConvert. \" +\r\n                        \"Discriminator value \\\"\" + discriminatorValue + \"\\\" could not be found in the registered classes. \" +\r\n                        \"Make sure you register the class using the method JsonConvert.registerClasses(\" + discriminatorValue + \")\" +\r\n                        \"\\n\");\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(\"Fatal error in JsonConvert. \" +\r\n                    \"Discriminator property \\\"\" + this.discriminatorPropertyName + \"\\\" is missing in JSON object.\" +\r\n                    \"\\n\");\r\n            }\r\n        }\r\n        else {\r\n            // Make sure the class reference is given for if the discriminator is disabled\r\n            if (classReference === null) {\r\n                throw new Error(\"Fatal error in JsonConvert. \" +\r\n                    \"Passed parameter classReference in JsonConvert.deserialize() is null. \" +\r\n                    \"This is only allowed if discriminator feature is enabled.\" +\r\n                    \"\\n\");\r\n            }\r\n            return classReference;\r\n        }\r\n    };\r\n    /**\r\n     * Tries to find the JSON mapping for a given class property from the given instance used for mapping,\r\n     * and finally assign the value from the given dataObject\r\n     *\r\n     * @param dataObject the object containing the value to be assigned\r\n     * @param instance the instance of the class used for mapping\r\n     * @param classPropertyName the property name\r\n     * @param json the JSON object\r\n     * @throws throws an Error in case of failure\r\n     */\r\n    JsonConvert.prototype.serializeObject_loopProperty = function (dataObject, instance, classPropertyName, json) {\r\n        var _this = this;\r\n        var _a, _b;\r\n        // Check if a JSON-object mapping is possible for a property\r\n        var mappingOptions = this.getClassPropertyMappingOptions(instance, classPropertyName);\r\n        if (mappingOptions === null) {\r\n            return;\r\n        }\r\n        // Get expected and real values\r\n        var jsonPropertyName = mappingOptions.jsonPropertyName;\r\n        var expectedJsonType = mappingOptions.expectedJsonType;\r\n        var convertingMode = (_a = this.propertyConvertingMode) !== null && _a !== void 0 ? _a : mappingOptions.convertingMode;\r\n        var customConverter = mappingOptions.customConverter;\r\n        var classInstancePropertyValue = dataObject[classPropertyName];\r\n        // Check if we have a nullable type\r\n        classInstancePropertyValue = this.mapUndefinedToNull && classInstancePropertyValue === undefined ? null : classInstancePropertyValue;\r\n        if (classInstancePropertyValue === undefined || classInstancePropertyValue === null) {\r\n            if (convertingMode === PropertyConvertingMode.IGNORE_NULLABLE) {\r\n                return;\r\n            }\r\n            if (convertingMode === PropertyConvertingMode.PASS_NULLABLE) {\r\n                json[jsonPropertyName] = classInstancePropertyValue;\r\n                return;\r\n            }\r\n        }\r\n        // Map the property\r\n        try {\r\n            json[jsonPropertyName] = customConverter !== null ?\r\n                customConverter.serialize(classInstancePropertyValue) :\r\n                this.convertProperty(expectedJsonType, classInstancePropertyValue, convertingMode, true);\r\n            var classConstructorName_1 = (_b = dataObject === null || dataObject === void 0 ? void 0 : dataObject.constructor) === null || _b === void 0 ? void 0 : _b.name;\r\n            if (this._useDiscriminator && json instanceof Object) {\r\n                this.classes.forEach(function (classDataObject, key) {\r\n                    if (classDataObject.name === classConstructorName_1) {\r\n                        json[_this._discriminatorPropertyName] = key;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Failed to map the JavaScript instance of class \\\"\" + instance[Settings.CLASS_IDENTIFIER] + \"\\\" to JSON because of a type error.\\n\\n\" +\r\n                \"\\tClass property: \\n\\t\\t\" + classPropertyName + \"\\n\\n\" +\r\n                \"\\tClass property value: \\n\\t\\t\" + classInstancePropertyValue + \"\\n\\n\" +\r\n                \"\\tExpected type: \\n\\t\\t\" + this.getExpectedType(expectedJsonType) + \"\\n\\n\" +\r\n                \"\\tRuntime type: \\n\\t\\t\" + this.getTrueType(classInstancePropertyValue) + \"\\n\\n\" +\r\n                \"\\tJSON property: \\n\\t\\t\" + jsonPropertyName + \"\\n\\n\" +\r\n                e.message + \"\\n\");\r\n        }\r\n    };\r\n    /**\r\n     * Tries to find the JSON mapping for a given class property and finally assign the value.\r\n     *\r\n     * @param instance the instance of the class\r\n     * @param classPropertyName the property name\r\n     * @param json the JSON object\r\n     *\r\n     * @throws throws an Error in case of failure\r\n     */\r\n    JsonConvert.prototype.deserializeObject_loopProperty = function (instance, classPropertyName, json) {\r\n        var _a;\r\n        var mappingOptions = this.getClassPropertyMappingOptions(instance, classPropertyName);\r\n        if (mappingOptions === null) {\r\n            return;\r\n        }\r\n        // Get expected and real values\r\n        var jsonPropertyName = mappingOptions.jsonPropertyName;\r\n        var expectedJsonType = mappingOptions.expectedJsonType;\r\n        var convertingMode = (_a = this.propertyConvertingMode) !== null && _a !== void 0 ? _a : mappingOptions.convertingMode;\r\n        var customConverter = mappingOptions.customConverter;\r\n        var jsonValue = undefined;\r\n        try {\r\n            jsonValue = this.getObjectValue(json, jsonPropertyName);\r\n        }\r\n        catch (_b) { }\r\n        // Check if we have a nullable type\r\n        jsonValue = this.mapUndefinedToNull && jsonValue === undefined ? null : jsonValue;\r\n        if (jsonValue === undefined || jsonValue === null) {\r\n            if (convertingMode === PropertyConvertingMode.IGNORE_NULLABLE) {\r\n                return;\r\n            }\r\n            if (convertingMode === PropertyConvertingMode.PASS_NULLABLE) {\r\n                instance[classPropertyName] = jsonValue;\r\n                return;\r\n            }\r\n        }\r\n        // Map the property\r\n        try {\r\n            var classConstructorName = jsonValue instanceof Object ? jsonValue[this.discriminatorPropertyName] : null;\r\n            if (this._useDiscriminator && this.classes.has(classConstructorName)) {\r\n                expectedJsonType = this.classes.get(classConstructorName);\r\n            }\r\n            instance[classPropertyName] = customConverter !== null ?\r\n                customConverter.deserialize(jsonValue) :\r\n                this.convertProperty(expectedJsonType, jsonValue, convertingMode);\r\n        }\r\n        catch (e) {\r\n            throw new Error(\"Fatal error in JsonConvert. \" +\r\n                \"Failed to map the JSON object to the class \\\"\" + instance[Settings.CLASS_IDENTIFIER] + \"\\\" because of a type error.\\n\\n\" +\r\n                \"\\tClass property: \\n\\t\\t\" + classPropertyName + \"\\n\\n\" +\r\n                \"\\tExpected type: \\n\\t\\t\" + this.getExpectedType(expectedJsonType) + \"\\n\\n\" +\r\n                \"\\tJSON property: \\n\\t\\t\" + jsonPropertyName + \"\\n\\n\" +\r\n                \"\\tJSON type: \\n\\t\\t\" + this.getJsonType(jsonValue) + \"\\n\\n\" +\r\n                \"\\tJSON value: \\n\\t\\t\" + JSON.stringify(jsonValue) + \"\\n\\n\" +\r\n                e.message + \"\\n\");\r\n        }\r\n    };\r\n    ////////////////////\r\n    // HELPER METHODS //\r\n    ////////////////////\r\n    /**\r\n     * Gets the mapping options of a given class property.\r\n     *\r\n     * @param instance any class instance\r\n     * @param {string} propertyName any property name\r\n     *\r\n     * @returns {MappingOptions|null}\r\n     */\r\n    JsonConvert.prototype.getClassPropertyMappingOptions = function (instance, propertyName) {\r\n        var mappings = instance[Settings.MAPPING_PROPERTY];\r\n        // Check if mapping is defined\r\n        if (typeof (mappings) === \"undefined\")\r\n            return null;\r\n        /* Find mapping by iterating up the prototype chain to find a matching mapping, rather than\r\n         * just searching by property name. */\r\n        var prototype = Object.getPrototypeOf(instance);\r\n        /* According to documentation, we'll hit null when we've iterated all the way up to the base\r\n         * Object, but check for undefined as well in case prototype has been manually set to\r\n         * undefined. Note that javascript detects circular prototype references and will cause a\r\n         * TypeError, so no need to check for self, the prototype chain will eventually terminate. */\r\n        while (prototype !== null && prototype !== undefined) {\r\n            var classIdentifier = prototype[Settings.CLASS_IDENTIFIER];\r\n            if (!!classIdentifier) {\r\n                var mappingName = classIdentifier + \".\" + propertyName;\r\n                if (typeof (mappings[mappingName]) !== \"undefined\") {\r\n                    return mappings[mappingName];\r\n                }\r\n            }\r\n            prototype = Object.getPrototypeOf(prototype);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Compares the type of a given value with an internal expected json type.\r\n     * Either returns the resulting value or throws an exception.\r\n     *\r\n     * @param expectedType the expected type for the property\r\n     * @param value the property value to verify\r\n     * @param convertingMode the converting mode for this property\r\n     * @param serialize optional param (default: false), if given, we are in serialization mode\r\n     *\r\n     * @returns returns the resulted mapped property\r\n     *\r\n     * @throws an error in case of failure\r\n     */\r\n    JsonConvert.prototype.convertProperty = function (expectedType, value, convertingMode, serialize) {\r\n        ////////////////////////////\r\n        // Prior checks and setup //\r\n        ////////////////////////////\r\n        // Return the value immediately if we don't care about the type\r\n        if (expectedType === undefined || expectedType === Any || expectedType === null || expectedType === Object) {\r\n            return value;\r\n        }\r\n        // Check if we have a nullable type\r\n        value = this.mapUndefinedToNull && value === undefined ? null : value;\r\n        if (value === undefined || value === null) {\r\n            if (convertingMode === PropertyConvertingMode.IGNORE_NULLABLE) {\r\n                return undefined;\r\n            }\r\n            if (convertingMode === PropertyConvertingMode.PASS_NULLABLE) {\r\n                return value;\r\n            }\r\n        }\r\n        var expectedDimension = \"1\";\r\n        if (expectedType instanceof Array) {\r\n            expectedDimension = \"2\";\r\n        }\r\n        var valueDimension = \"1or2\";\r\n        if (value instanceof Array) {\r\n            valueDimension = \"2\";\r\n        }\r\n        else if (!(value instanceof Object)) {\r\n            valueDimension = \"1\";\r\n        }\r\n        if (expectedDimension === \"1\" && valueDimension === \"2\") {\r\n            throw new Error(\"\\tReason: Expected a non-array type, but given value is an array.\");\r\n        }\r\n        if (expectedDimension === \"2\" && valueDimension === \"1\") {\r\n            // Allow to use null in the special case\r\n            if (value === null && this.valueCheckingMode !== ValueCheckingMode.DISALLOW_NULL) {\r\n                return null;\r\n            }\r\n            else if (value === null) {\r\n                throw new Error(\"\\tReason: Expected an array, but given value is null.\");\r\n            }\r\n            throw new Error(\"\\tReason: Expected an array, but given value is a primitive type.\");\r\n        }\r\n        //////////////////\r\n        // Check values //\r\n        //////////////////\r\n        if (expectedDimension === \"2\" && (valueDimension === \"2\" || valueDimension === \"1or2\")) {\r\n            // Return an empty array if we have an empty array or object as value\r\n            if (value.length === 0 || Object.keys(value).length === 0) {\r\n                return [];\r\n            }\r\n            // Return the value if we don't care about the array type\r\n            if (expectedType.length === 0) {\r\n                return value;\r\n            }\r\n            // Copy the expectedJsonType array so we don't change the class-level mapping based on the value of this property\r\n            var jsonType = expectedType.slice(0);\r\n            var array = [];\r\n            if (valueDimension === \"2\") {\r\n                // Loop through the data. Both type and value are at least of length 1\r\n                var autofillType = jsonType.length < value.length;\r\n                for (var i = 0; i < value.length; i++) {\r\n                    if (autofillType && i >= jsonType.length) {\r\n                        jsonType[i] = jsonType[i - 1];\r\n                    }\r\n                    array[i] = this.convertProperty(jsonType[i], value[i], this.propertyConvertingMode || PropertyConvertingMode.MAP_NULLABLE, serialize);\r\n                }\r\n                return array;\r\n            }\r\n            else {\r\n                // Loop through the data. Both type and value are at least of length 1\r\n                var autofillType = jsonType.length < Object.keys(value).length;\r\n                var i = 0;\r\n                for (var key in value) {\r\n                    if (autofillType && i >= jsonType.length) {\r\n                        jsonType[i] = jsonType[i - 1];\r\n                    }\r\n                    array[key] = this.convertProperty(jsonType[i], value[key], this.propertyConvertingMode || PropertyConvertingMode.MAP_NULLABLE, serialize);\r\n                    i++;\r\n                }\r\n                return array;\r\n            }\r\n        }\r\n        else if (expectedDimension === \"1\" && (valueDimension === \"1\" || valueDimension === \"1or2\")) {\r\n            // Check if objects match\r\n            if (((expectedType instanceof Object && [String, Number, Boolean].includes(expectedType) === false) || typeof expectedType === \"string\") && value instanceof Object) {\r\n                // If the expected type is a string (means: lazy-loading), get the real type from the registered classes\r\n                if (typeof expectedType === \"string\") {\r\n                    var realExpectedType = this.classes.get(expectedType);\r\n                    if (!realExpectedType) {\r\n                        throw new Error(\"\\tReason: Given expected type \\\"\" + expectedType + \"\\\" not registered with JsonConvert.registerClasses().\");\r\n                    }\r\n                    expectedType = realExpectedType;\r\n                }\r\n                if (expectedType.prototype.hasOwnProperty(Settings.CLASS_IDENTIFIER)) {\r\n                    return serialize ?\r\n                        this.serializeObject(value, expectedType) :\r\n                        this.deserializeObject(value, expectedType);\r\n                }\r\n                else {\r\n                    return value;\r\n                }\r\n            }\r\n            else {\r\n                // Check for null values\r\n                if (value === null) {\r\n                    if (expectedType === String || expectedType === Number || expectedType === Boolean) {\r\n                        if (this.valueCheckingMode === ValueCheckingMode.ALLOW_NULL) {\r\n                            return null;\r\n                        }\r\n                        else {\r\n                            throw new Error(\"\\tReason: Given value null does not match the expected primitive type.\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.valueCheckingMode !== ValueCheckingMode.DISALLOW_NULL) {\r\n                            return null;\r\n                        }\r\n                        else {\r\n                            throw new Error(\"\\tReason: Given value null does not match the expected object type.\");\r\n                        }\r\n                    }\r\n                }\r\n                // Check for primitive matches\r\n                if ((expectedType === String && typeof (value) === \"string\") ||\r\n                    (expectedType === Number && typeof (value) === \"number\") ||\r\n                    (expectedType === Boolean && typeof (value) === \"boolean\")) {\r\n                    return value;\r\n                }\r\n                else {\r\n                    if (this.ignorePrimitiveChecks && [\"string\", \"number\", \"boolean\"].includes(typeof (value))) {\r\n                        return value;\r\n                    }\r\n                    throw new Error(\"\\tReason: Given value type does not match the expected primitive type.\");\r\n                }\r\n            }\r\n        }\r\n        // All other attempts are fatal\r\n        throw new Error(\"\\tReason: Mapping failed because of an unknown error.\");\r\n    };\r\n    /**\r\n     * Gets the value of an object for a given value.\r\n     * If the object does not have the specific key, an Error is thrown.\r\n     *\r\n     * @param data\r\n     * @param key\r\n     *\r\n     * @returns returns the value\r\n     *\r\n     * @throws an Error in case of the key was not found in the object\r\n     */\r\n    JsonConvert.prototype.getObjectValue = function (data, key) {\r\n        // If we do not care about the case of the key, ad\r\n        if (this.propertyMatchingRule === PropertyMatchingRule.CASE_INSENSITIVE) {\r\n            // Create a mapping of the keys: keys[lowercase]=normalcase\r\n            var keyMapping = Object.keys(data).reduce(function (keys, key) {\r\n                keys[key.toLowerCase()] = key;\r\n                return keys;\r\n            }, {});\r\n            // Define the new key\r\n            key = keyMapping[key.toLowerCase()];\r\n        }\r\n        // Throw an error if the key is not in the object\r\n        if (key in data === false) {\r\n            throw new Error();\r\n        }\r\n        return data[key];\r\n    };\r\n    ///////////////////////////\r\n    // JSON2TYPESCRIPT TYPES //\r\n    ///////////////////////////\r\n    /**\r\n     * Returns a string representation of the expected json type.\r\n     *\r\n     * @param expectedJsonType the expected type given from the decorator\r\n     *\r\n     * @returns {string} the string representation\r\n     */\r\n    JsonConvert.prototype.getExpectedType = function (expectedJsonType) {\r\n        var type = \"\";\r\n        if (expectedJsonType instanceof Array) {\r\n            type = \"[\";\r\n            for (var i = 0; i < expectedJsonType.length; i++) {\r\n                if (i > 0)\r\n                    type += \",\";\r\n                type += this.getExpectedType(expectedJsonType[i]);\r\n            }\r\n            type += \"]\";\r\n            return type;\r\n        }\r\n        else {\r\n            if (expectedJsonType === Any || expectedJsonType === null || expectedJsonType === Object) {\r\n                return \"any\";\r\n            }\r\n            else if (expectedJsonType === String || expectedJsonType === Boolean || expectedJsonType === Number) {\r\n                return (new expectedJsonType()).constructor.name.toLowerCase();\r\n            }\r\n            else if (typeof expectedJsonType === \"function\") {\r\n                return (new expectedJsonType()).constructor.name;\r\n            }\r\n            else if (typeof expectedJsonType === \"string\") {\r\n                return expectedJsonType;\r\n            }\r\n            else if (expectedJsonType === undefined) {\r\n                return \"undefined\";\r\n            }\r\n            else {\r\n                return \"?????\";\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a string representation of the JSON value type.\r\n     *\r\n     * @param jsonValue the JSON value\r\n     *\r\n     * @returns {string} the string representation\r\n     */\r\n    JsonConvert.prototype.getJsonType = function (jsonValue) {\r\n        if (jsonValue === null)\r\n            return \"null\";\r\n        var type = \"\";\r\n        if (jsonValue instanceof Array) {\r\n            type = \"[\";\r\n            for (var i = 0; i < jsonValue.length; i++) {\r\n                if (i > 0)\r\n                    type += \",\";\r\n                type += this.getJsonType(jsonValue[i]);\r\n            }\r\n            type += \"]\";\r\n            return type;\r\n        }\r\n        else {\r\n            return typeof (jsonValue);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a string representation of the true TypeScript type.\r\n     *\r\n     * @param trueValue the true value\r\n     *\r\n     * @returns {string} the string representation\r\n     */\r\n    JsonConvert.prototype.getTrueType = function (trueValue) {\r\n        return typeof (trueValue);\r\n    };\r\n    return JsonConvert;\r\n}());\r\nexport { JsonConvert };\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAC3B,SAASC,aAAa,EAAEC,sBAAsB,EAAEC,oBAAoB,EAAEC,iBAAiB,QAAQ,sBAAsB;AACrH,SAASC,QAAQ,QAAQ,wBAAwB;AACjD;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,aAAe,YAAY;EACzC;EACA;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,WAAWA,CAACC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,EAAEC,oBAAoB,EAAE;IAChG;IACA;IACA;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAGV,aAAa,CAACW,MAAM;IAC1C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAGT,iBAAiB,CAACU,iBAAiB;IAC7D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC;AACR;AACA;AACA;IACQ,IAAI,CAACC,sBAAsB,GAAG,KAAK;IACnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAGd,oBAAoB,CAACe,WAAW;IAC7D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAGC,SAAS;IACxC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,0BAA0B,GAAG,OAAO;IACzC;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;IACzB,IAAIjB,aAAa,KAAKa,SAAS,IAAIb,aAAa,IAAIN,aAAa,EAC7D,IAAI,CAACM,aAAa,GAAGA,aAAa;IACtC,IAAIC,iBAAiB,KAAKY,SAAS,IAAIZ,iBAAiB,IAAIJ,iBAAiB,EACzE,IAAI,CAACI,iBAAiB,GAAGA,iBAAiB;IAC9C,IAAIC,qBAAqB,KAAKW,SAAS,EACnC,IAAI,CAACX,qBAAqB,GAAGA,qBAAqB;IACtD,IAAIC,oBAAoB,KAAKU,SAAS,EAClC,IAAI,CAACV,oBAAoB,GAAGA,oBAAoB;EACxD;EACAe,MAAM,CAACC,cAAc,CAACpB,WAAW,CAACqB,SAAS,EAAE,eAAe,EAAE;IAC1D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACjB,cAAc;IAC9B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAIA,KAAK,IAAI7B,aAAa,EACtB,IAAI,CAACU,cAAc,GAAGmB,KAAK;IACnC,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACpB,WAAW,CAACqB,SAAS,EAAE,mBAAmB,EAAE;IAC9D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACf,kBAAkB;IAClC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQgB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAIA,KAAK,IAAI1B,iBAAiB,EAC1B,IAAI,CAACS,kBAAkB,GAAGiB,KAAK;IACvC,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACpB,WAAW,CAACqB,SAAS,EAAE,oBAAoB,EAAE;IAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACb,mBAAmB;IACnC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQc,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACf,mBAAmB,GAAGe,KAAK;IACpC,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACpB,WAAW,CAACqB,SAAS,EAAE,uBAAuB,EAAE;IAClE;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACZ,sBAAsB;IACtC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQa,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACd,sBAAsB,GAAGc,KAAK;IACvC,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACpB,WAAW,CAACqB,SAAS,EAAE,sBAAsB,EAAE;IACjE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACX,qBAAqB;IACrC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQY,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAIA,KAAK,IAAI3B,oBAAoB,EAC7B,IAAI,CAACc,qBAAqB,GAAGa,KAAK;IAC1C,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACpB,WAAW,CAACqB,SAAS,EAAE,wBAAwB,EAAE;IACnE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACT,uBAAuB;IACvC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}