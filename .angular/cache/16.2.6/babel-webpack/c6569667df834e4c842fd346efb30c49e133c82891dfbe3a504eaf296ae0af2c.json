{"ast":null,"code":"var _class;\nimport * as QRCode from 'qrcode';\nimport * as i0 from \"@angular/core\";\nexport class QrcodeService {\n  constructor() {}\n  generateQRCode(data) {\n    return new Promise((resolve, reject) => {\n      QRCode.toDataURL(data, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n}\n_class = QrcodeService;\n_class.ɵfac = function QrcodeService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["QRCode","QrcodeService","constructor","generateQRCode","data","Promise","resolve","reject","toDataURL","err","url","factory","ɵfac","providedIn"],"sources":["D:\\FUSION-GITHUB\\WareHouseManagement\\src\\app\\qrcode.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as QRCode from 'qrcode';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QrcodeService {\n\n  constructor() { }\n\n\n  generateQRCode(data: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      QRCode.toDataURL(data, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n  \n}\n"],"mappings":";AACA,OAAO,KAAKA,MAAM,MAAM,QAAQ;;AAMhC,OAAM,MAAOC,aAAa;EAExBC,YAAA,GAAgB;EAGhBC,cAAcA,CAACC,IAAY;IACzB,OAAO,IAAIC,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC7CP,MAAM,CAACQ,SAAS,CAACJ,IAAI,EAAE,CAACK,GAAG,EAAEC,GAAG,KAAI;QAClC,IAAID,GAAG,EAAE;UACPF,MAAM,CAACE,GAAG,CAAC;SACZ,MAAM;UACLH,OAAO,CAACI,GAAG,CAAC;;MAEhB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;SAfWT,aAAa;;mBAAbA,MAAa;AAAA;;SAAbA,MAAa;EAAAU,OAAA,EAAbV,MAAa,CAAAW,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}